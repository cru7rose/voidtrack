--- STRUKTURA PROJEKTU (tylko istotne pliki) ---
./ARCHITECTURE_OVERVIEW.md
./audit-service/pom.xml
./audit-service/src/main/java/com/voidtracker/oms/audit/AuditServiceApplication.java
./audit-service/src/main/java/com/voidtracker/oms/audit/config/CorsConfig.java
./audit-service/src/main/java/com/voidtracker/oms/audit/controller/AuditController.java
./audit-service/src/main/java/com/voidtracker/oms/audit/dto/AuditDto.java
./audit-service/src/main/java/com/voidtracker/oms/audit/README.md
./audit-service/src/main/java/com/voidtracker/oms/audit/repository/AuditRepository.java
./audit-service/src/main/java/com/voidtracker/oms/audit/repository/InMemoryAuditRepository.java
./audit-service/src/main/java/com/voidtracker/oms/audit/service/AuditService.java
./audit-service/src/main/resources/application.properties
./audit-service/src/test/java/com/voidtracker/oms/audit/AuditServiceApplicationTests.java
./audit-service/src/test/java/com/voidtracker/oms/audit/controller/AuditControllerContractIT.java
./audit-service/src/test/java/com/voidtracker/oms/audit/controller/AuditControllerSchemaValidationTest.java
./audit-service/src/test/java/com/voidtracker/oms/audit/controller/AuditControllerTest.java
./audit-service/src/test/java/com/voidtracker/oms/audit/dto/AuditDtoContractTest.java
./audit-service/src/test/java/com/voidtracker/oms/audit/dto/AuditDtoMappingTest.java
./audit-service/src/test/java/com/voidtracker/oms/audit/dto/AuditDtoRoundTripTest.java
./audit-service/src/test/java/com/voidtracker/oms/audit/dto/ExampleAuditDtoFactory.java
./audit-service/src/test/java/com/voidtracker/oms/audit/service/AuditServiceTest.java
./docker-compose.yml
./DTO_README.md
./HELP.md
./OMS_ARCHITEKTURA.md
./order-service/pom.xml
./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsController.java
./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsKpiController.java
./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsKpiDto.java
./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsKpiRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsKpiService.java
./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsReportController.java
./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsReportDto.java
./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsReportRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsReportService.java
./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsService.java
./order-service/src/main/java/com/voidtracker/oms/order/analytics/README.md
./order-service/src/main/java/com/voidtracker/oms/order/billing/BillingController.java
./order-service/src/main/java/com/voidtracker/oms/order/billing/BillingService.java
./order-service/src/main/java/com/voidtracker/oms/order/billing/BillingServiceImpl.java
./order-service/src/main/java/com/voidtracker/oms/order/billing/InvoiceDto.java
./order-service/src/main/java/com/voidtracker/oms/order/billing/InvoiceRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/config/CorsConfig.java
./order-service/src/main/java/com/voidtracker/oms/order/config/OrderCreationConfig.java
./order-service/src/main/java/com/voidtracker/oms/order/config/OrderCreationConfigService.java
./order-service/src/main/java/com/voidtracker/oms/order/controller/HealthController.java
./order-service/src/main/java/com/voidtracker/oms/order/controller/OpenApiController.java
./order-service/src/main/java/com/voidtracker/oms/order/controller/OrderController.java
./order-service/src/main/java/com/voidtracker/oms/order/controller/RouteController.java
./order-service/src/main/java/com/voidtracker/oms/order/controller/VehicleController.java
./order-service/src/main/java/com/voidtracker/oms/order/dashboard/DashboardController.java
./order-service/src/main/java/com/voidtracker/oms/order/document/ComplianceCheckController.java
./order-service/src/main/java/com/voidtracker/oms/order/document/ComplianceCheckDto.java
./order-service/src/main/java/com/voidtracker/oms/order/document/ComplianceCheckRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/document/ComplianceCheckService.java
./order-service/src/main/java/com/voidtracker/oms/order/document/DocumentComplianceService.java
./order-service/src/main/java/com/voidtracker/oms/order/document/DocumentController.java
./order-service/src/main/java/com/voidtracker/oms/order/document/DocumentControllerV2.java
./order-service/src/main/java/com/voidtracker/oms/order/document/DocumentDto.java
./order-service/src/main/java/com/voidtracker/oms/order/document/DocumentRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/document/DocumentService.java
./order-service/src/main/java/com/voidtracker/oms/order/document/DocumentServiceImpl.java
./order-service/src/main/java/com/voidtracker/oms/order/document/EpodDocumentController.java
./order-service/src/main/java/com/voidtracker/oms/order/document/EpodDocumentDto.java
./order-service/src/main/java/com/voidtracker/oms/order/document/EpodDocumentRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/document/EpodDocumentService.java
./order-service/src/main/java/com/voidtracker/oms/order/dto/CreateOrderRequestDto.java
./order-service/src/main/java/com/voidtracker/oms/order/dto/EPoDDto.java
./order-service/src/main/java/com/voidtracker/oms/order/dto/OrderConfirmationResponseDto.java
./order-service/src/main/java/com/voidtracker/oms/order/dto/OrderDto.java
./order-service/src/main/java/com/voidtracker/oms/order/dto/OrderEventDto.java
./order-service/src/main/java/com/voidtracker/oms/order/dto/OrderListItemDto.java
./order-service/src/main/java/com/voidtracker/oms/order/dto/OrderStatusChangeRequestDto.java
./order-service/src/main/java/com/voidtracker/oms/order/dto/OrderStatusHistoryDto.java
./order-service/src/main/java/com/voidtracker/oms/order/dto/ProductDetailsDto.java
./order-service/src/main/java/com/voidtracker/oms/order/dto/RouteDto.java
./order-service/src/main/java/com/voidtracker/oms/order/dto/VehicleDto.java
./order-service/src/main/java/com/voidtracker/oms/order/eco/EcoAnalyticsController.java
./order-service/src/main/java/com/voidtracker/oms/order/eco/EcoAnalyticsService.java
./order-service/src/main/java/com/voidtracker/oms/order/eco/EcoAnalyticsServiceImpl.java
./order-service/src/main/java/com/voidtracker/oms/order/eco/EcoReportDto.java
./order-service/src/main/java/com/voidtracker/oms/order/eco/EcoReportRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/eco/EcoRouteSuggestionController.java
./order-service/src/main/java/com/voidtracker/oms/order/eco/EcoRouteSuggestionDto.java
./order-service/src/main/java/com/voidtracker/oms/order/eco/EcoRouteSuggestionRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/eco/EcoRouteSuggestionService.java
./order-service/src/main/java/com/voidtracker/oms/order/error/GlobalExceptionHandler.java
./order-service/src/main/java/com/voidtracker/oms/order/error/IntegrationFailureMonitor.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/Carrier.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/CarrierPerformanceController.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/CarrierPerformanceDto.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/CarrierPerformanceRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/CarrierPerformanceService.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/CarrierRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/CarrierService.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/Driver.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/DriverRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/DriverService.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/FleetController.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/FleetReportController.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/FleetReportDto.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/FleetReportRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/FleetReportService.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/FleetRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/FleetService.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/README.md
./order-service/src/main/java/com/voidtracker/oms/order/fleet/Vehicle.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/VehicleRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/fleet/VehicleService.java
./order-service/src/main/java/com/voidtracker/oms/order/gitkeep/.gitkeep
./order-service/src/main/java/com/voidtracker/oms/order/integration/IntegrationAdapter.java
./order-service/src/main/java/com/voidtracker/oms/order/integration/IntegrationController.java
./order-service/src/main/java/com/voidtracker/oms/order/integration/IntegrationEventDto.java
./order-service/src/main/java/com/voidtracker/oms/order/integration/IntegrationService.java
./order-service/src/main/java/com/voidtracker/oms/order/integration/OrderKafkaProducer.java
./order-service/src/main/java/com/voidtracker/oms/order/integration/README.md
./order-service/src/main/java/com/voidtracker/oms/order/mapper/OrderMapper.java
./order-service/src/main/java/com/voidtracker/oms/order/mobile/BarcodeScanController.java
./order-service/src/main/java/com/voidtracker/oms/order/mobile/BarcodeScanDto.java
./order-service/src/main/java/com/voidtracker/oms/order/mobile/BarcodeScanRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/mobile/BarcodeScanService.java
./order-service/src/main/java/com/voidtracker/oms/order/mobile/DriverTaskController.java
./order-service/src/main/java/com/voidtracker/oms/order/mobile/DriverTaskDto.java
./order-service/src/main/java/com/voidtracker/oms/order/mobile/DriverTaskRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/mobile/DriverTaskService.java
./order-service/src/main/java/com/voidtracker/oms/order/mobile/EpodController.java
./order-service/src/main/java/com/voidtracker/oms/order/mobile/EpodDto.java
./order-service/src/main/java/com/voidtracker/oms/order/mobile/EpodRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/mobile/EpodService.java
./order-service/src/main/java/com/voidtracker/oms/order/mobile/MobileController.java
./order-service/src/main/java/com/voidtracker/oms/order/mobile/README.md
./order-service/src/main/java/com/voidtracker/oms/order/notification/NotificationController.java
./order-service/src/main/java/com/voidtracker/oms/order/notification/NotificationControllerV2.java
./order-service/src/main/java/com/voidtracker/oms/order/notification/NotificationDto.java
./order-service/src/main/java/com/voidtracker/oms/order/notification/NotificationRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/notification/NotificationService.java
./order-service/src/main/java/com/voidtracker/oms/order/notification/NotificationServiceImpl.java
./order-service/src/main/java/com/voidtracker/oms/order/OrderServiceApplication.java
./order-service/src/main/java/com/voidtracker/oms/order/portal/PortalController.java
./order-service/src/main/java/com/voidtracker/oms/order/portal/PortalOrderController.java
./order-service/src/main/java/com/voidtracker/oms/order/portal/PortalOrderDto.java
./order-service/src/main/java/com/voidtracker/oms/order/portal/PortalOrderRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/portal/PortalOrderService.java
./order-service/src/main/java/com/voidtracker/oms/order/portal/PortalService.java
./order-service/src/main/java/com/voidtracker/oms/order/README.md
./order-service/src/main/java/com/voidtracker/oms/order/repository/OrderRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/route/RouteDto.java
./order-service/src/main/java/com/voidtracker/oms/order/route/RouteOptimizationController.java
./order-service/src/main/java/com/voidtracker/oms/order/route/RouteOptimizationDto.java
./order-service/src/main/java/com/voidtracker/oms/order/route/RouteOptimizationRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/route/RouteOptimizationService.java
./order-service/src/main/java/com/voidtracker/oms/order/route/RoutePlanningController.java
./order-service/src/main/java/com/voidtracker/oms/order/route/RoutePlanningRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/route/RoutePlanningService.java
./order-service/src/main/java/com/voidtracker/oms/order/service/OrderSearchCriteria.java
./order-service/src/main/java/com/voidtracker/oms/order/service/OrderService.java
./order-service/src/main/java/com/voidtracker/oms/order/service/OrderServiceConfig.java
./order-service/src/main/java/com/voidtracker/oms/order/service/OrderServiceImpl.java
./order-service/src/main/java/com/voidtracker/oms/order/tracking/.gitkeep
./order-service/src/main/java/com/voidtracker/oms/order/tracking/README.md
./order-service/src/main/java/com/voidtracker/oms/order/tracking/TrackingController.java
./order-service/src/main/java/com/voidtracker/oms/order/tracking/TrackingEventDto.java
./order-service/src/main/java/com/voidtracker/oms/order/tracking/TrackingEventRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/tracking/TrackingEventService.java
./order-service/src/main/java/com/voidtracker/oms/order/tracking/TrackingRepository.java
./order-service/src/main/java/com/voidtracker/oms/order/tracking/TrackingService.java
./order-service/src/main/java/com/voidtracker/oms/order/validation/.gitkeep
./order-service/src/main/java/com/voidtracker/oms/order/validation/OrderValidator.java
./order-service/src/main/resources/application.properties
./order-service/src/main/resources/OrderServiceApplication.java
./order-service/src/test/java/com/voidtracker/oms/order/controller/HealthControllerTest.java
./order-service/src/test/java/com/voidtracker/oms/order/controller/OrderControllerContractIT.java
./order-service/src/test/java/com/voidtracker/oms/order/controller/OrderControllerTest.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/AllOrderDtoContractTests.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/CreateOrderRequestDtoContractTest.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/CreateOrderRequestDtoRoundTripTest.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/EPodDtoContractTest.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/ePoDDtoRoundTripTest.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/ExampleCreateOrderRequestDtoFactory.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/ExampleEPodDtoFactory.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/ExampleOrderConfirmationResponseDtoFactory.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/ExampleOrderDtoFactory.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/ExampleOrderEventDtoFactory.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/ExampleOrderListItemDtoFactory.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/ExampleOrderStatusHistoryDtoFactory.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/ExampleProductDetailsDtoFactory.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/OrderConfirmationResponseDtoContractTest.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/OrderConfirmationResponseDtoRoundTripTest.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/OrderDtoContractTest.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/OrderDtoExampleValidationTest.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/OrderDtoMappingTest.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/OrderDtoRoundTripTest.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/OrderEventDtoContractTest.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/OrderListItemDtoContractTest.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/OrderStatusHistoryDtoContractTest.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/ProductDetailsDtoContractTest.java
./order-service/src/test/java/com/voidtracker/oms/order/dto/ProductDetailsDtoMappingTest.java
./order-service/src/test/java/com/voidtracker/oms/order/OrderServiceApplicationTests.java
./order-service/src/test/java/com/voidtracker/oms/order/service/OrderServiceTest.java
./pom.xml
./README.md
./src/main/java/com/voidtracker/oms/voidtrackerparent/VoidtrackerApplication.java
./src/main/resources/application.properties
./src/test/java/com/voidtracker/oms/voidtrackerparent/VoidtrackerApplicationTests.java
./user-service/pom.xml
./user-service/src/main/java/com/voidtracker/oms/user/config/CorsConfig.java
./user-service/src/main/java/com/voidtracker/oms/user/config/JsonSchemaValidatorConfig.java
./user-service/src/main/java/com/voidtracker/oms/user/controller/UserController.java
./user-service/src/main/java/com/voidtracker/oms/user/dto/UserDto.java
./user-service/src/main/java/com/voidtracker/oms/user/dto/UserProfileDto.java
./user-service/src/main/java/com/voidtracker/oms/user/README.md
./user-service/src/main/java/com/voidtracker/oms/user/repository/InMemoryUserRepository.java
./user-service/src/main/java/com/voidtracker/oms/user/repository/UserRepository.java
./user-service/src/main/java/com/voidtracker/oms/user/service/UserService.java
./user-service/src/main/java/com/voidtracker/oms/user/UserServiceApplication.java
./user-service/src/main/java/com/voidtracker/oms/user/validation/JsonSchemaValidator.java
./user-service/src/main/resources/application.properties
./user-service/src/test/java/com/voidtracker/oms/user/controller/UserControllerContractIT.java
./user-service/src/test/java/com/voidtracker/oms/user/controller/UserControllerSchemaValidationTest.java
./user-service/src/test/java/com/voidtracker/oms/user/controller/UserControllerTest.java
./user-service/src/test/java/com/voidtracker/oms/user/dto/ExampleUserProfileDtoFactory.java
./user-service/src/test/java/com/voidtracker/oms/user/dto/UserProfileDtoContractTest.java
./user-service/src/test/java/com/voidtracker/oms/user/dto/UserProfileDtoMappingTest.java
./user-service/src/test/java/com/voidtracker/oms/user/dto/UserProfileDtoRoundTripTest.java
./user-service/src/test/java/com/voidtracker/oms/user/service/UserServiceTest.java
./user-service/src/test/java/com/voidtracker/oms/user/UserServiceApplicationTests.java
./voidtracker-commons/pom.xml
./voidtracker-commons/src/main/java/com/voidtracker/oms/commons/dto/ApiErrorDto.java
./voidtracker-commons/src/main/java/com/voidtracker/oms/commons/enums/OrderStatus.java
./voidtracker-commons/src/main/java/com/voidtracker/oms/commons/exception/RestExceptionHandler.java
./voidtracker-commons/src/main/java/com/voidtracker/oms/commons/validation/JsonSchemaValidator.java
./voidtracker-commons/src/main/resources/application.properties
./voidtracker-commons/src/test/java/com/voidtracker/oms/commons/dto/ApiErrorDtoContractTest.java
./voidtracker-commons/src/test/java/com/voidtracker/oms/commons/dto/ApiErrorDtoRoundTripTest.java
./voidtracker-commons/src/test/java/com/voidtracker/oms/commons/dto/ExampleApiErrorDtoFactory.java


--- ZAWARTOŚĆ PLIKÓW ŹRÓDŁOWYCH I KONFIGURACYJNYCH ---


--- Plik: ./ARCHITECTURE_OVERVIEW.md ---
# VoidTracker OMS: Architecture Overview

## MVP Modules (Phase 1)

- **Order Management**: Core order lifecycle, sync/async creation, status, soft-delete, search/filter, history.
- **Route Planning & Optimization**: Integration stubs for OSRM/GraphHopper, service interface for route calculation, DTOs for route requests/results.
- **Real-time Tracking**: GPS event DTOs, Kafka/IoT integration stubs, tracking service, event consumer/producer.
- **Mobile API**: Controller for driver app (task list, status update, ePoD, barcode scanning), DTOs for mobile flows.
- **Basic Dashboard API**: Controller for dispatcher dashboard (order/task list, map data, alerts).

## Future Modules (Phase 2+)

- **Fleet & Carrier Management**: Vehicle/driver entities, repositories, services, carrier performance.
- **Document & Compliance**: ePoD, document upload endpoints, DTOs, compliance checks.
- **Analytics & KPI Reporting**: Analytics service, DTOs, endpoints for BI/KPI.
- **Integration Layer**: ERP/WMS adapters, external API connectors, event bridges.
- **Notification/Communication**: Alert/notification service, DTOs, endpoints for system/user alerts.
- **Customer/Partner Portal API**: Controller, DTOs for client self-service, order tracking, document download.
- **Billing/Settlement**: Freight audit, cost calculation, invoice DTOs, settlement endpoints.
- **CO2/Eco Analytics**: Emission tracking, eco route suggestions, reporting.

## Package Structure (Java)

- `order` — Order management (controller, service, dto, repository, error, validation)
- `route` — Route planning/optimization (controller, service, integration, dto)
- `tracking` — Real-time tracking (service, event, integration)
- `mobile` — Mobile API (controller, dto)
- `dashboard` — Dispatcher dashboard API (controller, dto)
- `fleet` — Fleet/carrier management (entity, service, repository, dto)
- `document` — Document/compliance (controller, service, dto)
- `analytics` — Analytics/KPI (service, controller, dto)
- `integration` — ERP/WMS/external API adapters
- `notification` — Notification/alerting (service, dto)
- `portal` — Customer/partner portal API (controller, dto)

## Roadmap

- **Phase 0**: Analysis, architecture, UI/UX prototyping, tech stack selection
- **Phase 1**: MVP — Order, Route, Tracking, Mobile, Dashboard
- **Phase 2+**: Fleet, Document, Analytics, Integration, Notification, Portal, Billing, Eco

## Notes
- All modules are microservice-ready, API-first, and cloud-native.
- All endpoints are OpenAPI documented, versioned, and secured (JWT, roles).
- All DTOs and schemas are versioned, validated, and tested.
- All modules are designed for future extension and integration.


--- Plik: ./audit-service/pom.xml ---
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.voidtracker.oms</groupId>
        <artifactId>voidtracker-parent</artifactId>
        <version>1.0.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>audit-service</artifactId>
    <name>Audit Service</name>
    <description>Audit logging microservice</description>
    <dependencies>
        <dependency>
            <groupId>jakarta.validation</groupId>
            <artifactId>jakarta.validation-api</artifactId>
            <version>3.0.2</version>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>1.5.5.Final</version>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-processor</artifactId>
            <version>1.5.5.Final</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.18.3</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <version>2.18.3</version>
        </dependency>
        <dependency>
            <groupId>com.github.erosb</groupId>
            <artifactId>everit-json-schema</artifactId>
            <version>1.14.6</version>
        </dependency>
        <dependency>
            <groupId>com.voidtracker.oms</groupId>
            <artifactId>voidtracker-commons</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>org.everit.json</groupId>
            <artifactId>org.everit.json.schema</artifactId>
            <version>1.5.1</version>
            <scope>compile</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.json</groupId>
                    <artifactId>json</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>
</project>


--- Plik: ./audit-service/src/main/java/com/voidtracker/oms/audit/AuditServiceApplication.java ---
package com.voidtracker.oms.audit;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.springframework.context.annotation.Bean;

@SpringBootApplication
public class AuditServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(AuditServiceApplication.class, args);
    }

    @Bean
    public ObjectMapper objectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new JavaTimeModule());
        return mapper;
    }
}


--- Plik: ./audit-service/src/main/java/com/voidtracker/oms/audit/config/CorsConfig.java ---
package com.voidtracker.oms.audit.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class CorsConfig {
    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**")
                        .allowedOrigins("http://localhost:8080", "http://localhost:3000", "*")
                        .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                        .allowedHeaders("*")
                        .allowCredentials(true);
            }
        };
    }
}


--- Plik: ./audit-service/src/main/java/com/voidtracker/oms/audit/controller/AuditController.java ---
package com.voidtracker.oms.audit.controller;

import com.voidtracker.oms.audit.dto.AuditDto;
import com.voidtracker.oms.audit.service.AuditService;
import com.voidtracker.oms.commons.validation.JsonSchemaValidator;
import org.everit.json.schema.ValidationException;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import java.nio.charset.StandardCharsets;
import com.fasterxml.jackson.databind.ObjectMapper;

@RestController
@RequestMapping("/api/audit")
@Tag(name = "Audit Events", description = "Audit event logging and query API")
public class AuditController {
    private final AuditService auditService;
    private final JsonSchemaValidator jsonSchemaValidator;
    private final String auditSchema;
    private final ObjectMapper objectMapper;

    public AuditController(AuditService auditService, JsonSchemaValidator jsonSchemaValidator, ObjectMapper objectMapper) throws Exception {
        this.auditService = auditService;
        this.jsonSchemaValidator = jsonSchemaValidator;
        this.objectMapper = objectMapper;
        var resource = new ClassPathResource("schemas/json/Audit_v1.json");
        this.auditSchema = new String(resource.getInputStream().readAllBytes(), StandardCharsets.UTF_8);
    }

    @GetMapping
    @Operation(summary = "List all audit events", responses = {
        @ApiResponse(responseCode = "200", description = "List of audit events", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuditDto.class)))
    })
    public List<AuditDto> listAuditEvents() {
        return auditService.listAuditEvents();
    }

    @GetMapping("/{auditId}")
    @Operation(summary = "Get audit event details", responses = {
        @ApiResponse(responseCode = "200", description = "Audit event details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuditDto.class)))
    })
    public AuditDto getAuditEvent(@PathVariable String auditId) {
        return auditService.getAuditEvent(auditId);
    }

    @PostMapping
    @Operation(summary = "Log new audit event", responses = {
        @ApiResponse(responseCode = "200", description = "Created audit event", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuditDto.class))),
        @ApiResponse(responseCode = "400", description = "Validation error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = com.voidtracker.oms.commons.dto.ApiErrorDto.class)))
    })
    public ResponseEntity<?> createAuditEvent(@RequestBody String auditDtoJson) throws Exception {
        try {
            jsonSchemaValidator.validate(auditDtoJson, auditSchema);
            AuditDto auditDto = objectMapper.readValue(auditDtoJson, AuditDto.class);
            return ResponseEntity.status(HttpStatus.CREATED).body(auditService.createAuditEvent(auditDto));
        } catch (ValidationException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(
                Map.of("errorCode", "VALIDATION_ERROR", "message", e.getMessage())
            );
        }
    }
}


--- Plik: ./audit-service/src/main/java/com/voidtracker/oms/audit/dto/AuditDto.java ---
package com.voidtracker.oms.audit.dto;

import java.time.OffsetDateTime;
import java.util.Map;

public record AuditDto(
    String auditId,
    String entityType,
    String entityId,
    String action,
    String userId,
    OffsetDateTime timestamp,
    Map<String, Object> details
) {

}


--- Plik: ./audit-service/src/main/java/com/voidtracker/oms/audit/README.md ---
# Audit Service - Developer Notes

## Overview
This service logs and provides access to all audit events for the VoidTracker OMS platform, including:
- Logging of all status changes, edits, and ePoD events
- Query endpoints for audit history (admin/superuser)
- Contract-driven API (OpenAPI, JSON Schema, DTOs)

## Key Packages
- `controller` - REST API endpoints
- `dto` - Data Transfer Objects (records, contract-driven)
- `service` - Business logic
- `repository` - Persistence layer
- `config` - Service configuration

## Development Guidelines
- All DTOs must have a matching JSON Schema and example payload
- All endpoints must be documented in OpenAPI and versioned
- Use contract and round-trip tests for all DTOs
- Validate all incoming/outgoing payloads against schemas
- Use constructor-based dependency injection
- No business logic in controllers (pure services)
- All changes must be auditable and queryable

## Quick Start
- Run contract tests: `mvn test`
- Validate schemas/examples: see scripts in project root
- API docs: `/swagger-ui.html` (after running service)

## Roadmap
- Add advanced filtering and search for audit events
- Integrate with all OMS microservices for event publishing
- Support for export, compliance, and alerting


--- Plik: ./audit-service/src/main/java/com/voidtracker/oms/audit/repository/AuditRepository.java ---
package com.voidtracker.oms.audit.repository;

import com.voidtracker.oms.audit.dto.AuditDto;
import java.util.*;

public interface AuditRepository {
    List<AuditDto> findAll();
    Optional<AuditDto> findById(String auditId);
    AuditDto save(AuditDto event);

    void deleteById(String id);
}


--- Plik: ./audit-service/src/main/java/com/voidtracker/oms/audit/repository/InMemoryAuditRepository.java ---
package com.voidtracker.oms.audit.repository;

import com.voidtracker.oms.audit.dto.AuditDto;
import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class InMemoryAuditRepository implements AuditRepository {
    private final Map<String, AuditDto> events = new HashMap<>();

    @Override
    public List<AuditDto> findAll() {
        return new ArrayList<>(events.values());
    }

    @Override
    public Optional<AuditDto> findById(String auditId) {
        return Optional.ofNullable(events.get(auditId));
    }

    @Override
    public AuditDto save(AuditDto event) {
        events.put(event.auditId(), event);
        return event;
    }

    @Override
    public void deleteById(String id) {
        events.remove(id);
    }
}


--- Plik: ./audit-service/src/main/java/com/voidtracker/oms/audit/service/AuditService.java ---
package com.voidtracker.oms.audit.service;

import com.voidtracker.oms.audit.dto.AuditDto;
import com.voidtracker.oms.audit.repository.AuditRepository;
import org.springframework.stereotype.Service;
import java.util.*;

@Service
public class AuditService {
    private final AuditRepository auditRepository;

    public AuditService(AuditRepository auditRepository) {
        this.auditRepository = auditRepository;
    }

    public List<AuditDto> listAuditEvents() {
        return auditRepository.findAll();
    }

    public AuditDto getAuditEvent(String auditId) {
        return auditRepository.findById(auditId).orElse(null);
    }

    public AuditDto createAuditEvent(AuditDto event) {
        return auditRepository.save(event);
    }
}


--- Plik: ./audit-service/src/main/resources/application.properties ---
server.port=8083
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
management.endpoints.web.exposure.include=health,info


--- Plik: ./audit-service/src/test/java/com/voidtracker/oms/audit/AuditServiceApplicationTests.java ---
package com.voidtracker.oms.audit;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

import org.springframework.boot.test.mock.mockito.MockBean;
import com.voidtracker.oms.audit.service.AuditService;
import com.voidtracker.oms.commons.validation.JsonSchemaValidator;

@SpringBootTest
class AuditServiceApplicationTests {
    @MockBean
    private AuditService auditService;
    @MockBean
    private JsonSchemaValidator jsonSchemaValidator;

    @Test
    void contextLoads() {
    }

}


--- Plik: ./audit-service/src/test/java/com/voidtracker/oms/audit/controller/AuditControllerContractIT.java ---
package com.voidtracker.oms.audit.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.voidtracker.oms.audit.dto.AuditDto;
import com.voidtracker.oms.audit.dto.ExampleAuditDtoFactory;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
public class AuditControllerContractIT {
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ObjectMapper objectMapper;

    @Test
    void shouldAcceptValidAuditDto() throws Exception {
        AuditDto audit = ExampleAuditDtoFactory.createExampleAuditDto();
        mockMvc.perform(post("/api/audit/")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(audit)))
                .andExpect(status().isCreated());
    }
}


--- Plik: ./audit-service/src/test/java/com/voidtracker/oms/audit/controller/AuditControllerSchemaValidationTest.java ---
package com.voidtracker.oms.audit.controller;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;

import org.springframework.boot.test.mock.mockito.MockBean;
import com.voidtracker.oms.audit.service.AuditService;
import com.voidtracker.oms.commons.validation.JsonSchemaValidator;

@WebMvcTest(AuditController.class)
class AuditControllerSchemaValidationTest {
    @MockBean
    private AuditService auditService;
    @MockBean
    private JsonSchemaValidator jsonSchemaValidator;
    @Autowired
    private MockMvc mockMvc;

    @Test
    void shouldRejectInvalidAuditPayload() throws Exception {
        String invalidJson = "{\"auditId\":\"1\"}"; // missing required fields
        org.everit.json.schema.ValidationException validationException = new org.everit.json.schema.ValidationException(null, "Invalid payload", "", "");
        org.mockito.Mockito.doThrow(validationException).when(jsonSchemaValidator).validate(org.mockito.ArgumentMatchers.any(), org.mockito.ArgumentMatchers.any());
        mockMvc.perform(post("/api/audit")
                .contentType(MediaType.APPLICATION_JSON)
                .content(invalidJson))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.errorCode").value("VALIDATION_ERROR"));
    }

    @Test
    void shouldAcceptValidAuditPayload() throws Exception {
        String validJson = "{\"auditId\":\"audit-001\",\"entityType\":\"Order\",\"entityId\":\"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\"action\":\"STATUS_CHANGE\",\"userId\":\"john_doe\",\"timestamp\":\"2024-06-10T12:10:00Z\",\"details\":{\"oldStatus\":\"PICKUP\",\"newStatus\":\"POD\"}}";
        com.fasterxml.jackson.databind.ObjectMapper objectMapper = new com.fasterxml.jackson.databind.ObjectMapper();
        objectMapper.registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());
        mockMvc.perform(post("/api/audit")
                .contentType(MediaType.APPLICATION_JSON)
                .content(validJson))
                .andExpect(status().isCreated());
    }
}


--- Plik: ./audit-service/src/test/java/com/voidtracker/oms/audit/controller/AuditControllerTest.java ---
package com.voidtracker.oms.audit.controller;

import com.voidtracker.oms.audit.dto.AuditDto;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.springframework.boot.test.mock.mockito.MockBean;
import com.voidtracker.oms.audit.service.AuditService;
import com.voidtracker.oms.commons.validation.JsonSchemaValidator;

@WebMvcTest(AuditController.class)
class AuditControllerTest {
    @MockBean
    private AuditService auditService;
    @MockBean
    private JsonSchemaValidator jsonSchemaValidator;
    @Autowired
    private MockMvc mockMvc;

    // Use direct instantiation to avoid autowiring issues
    private final ObjectMapper objectMapper = new ObjectMapper().registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());

    @Test
    void shouldCreateAuditEvent() throws Exception {
        AuditDto auditDto = new AuditDto(
            "audit-001",
            "Order",
            "a1b2c3d4-e5f6-7890-1234-567890abcdef",
            "STATUS_CHANGE",
            "john_doe",
            java.time.OffsetDateTime.parse("2024-06-10T12:10:00Z"),
            java.util.Map.of("oldStatus", "PICKUP", "newStatus", "POD")
        );
        String json = objectMapper.writeValueAsString(auditDto);
        mockMvc.perform(post("/api/audit")
                .contentType(MediaType.APPLICATION_JSON)
                .content(json))
                .andExpect(status().isCreated());
    }
}


--- Plik: ./audit-service/src/test/java/com/voidtracker/oms/audit/dto/AuditDtoContractTest.java ---
package com.voidtracker.oms.audit.dto;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import com.fasterxml.jackson.databind.ObjectMapper;

class AuditDtoContractTest {
    @Test
    void auditDtoExampleShouldMatchSchema() throws Exception {
        // Load the example JSON from the classpath to avoid path issues
        try (var is = getClass().getClassLoader().getResourceAsStream("schemas/json/example/AuditDto_example.json")) {
            assertNotNull(is, "Example JSON file not found in classpath");
            String exampleJson = new String(is.readAllBytes(), java.nio.charset.StandardCharsets.UTF_8);
            assertNotNull(exampleJson);
            ObjectMapper mapper = new ObjectMapper();
            mapper.registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());
            AuditDto dto = mapper.readValue(exampleJson, AuditDto.class);
            assertNotNull(dto);
            assertEquals("Order", dto.entityType());
            assertTrue(exampleJson.contains("entityType"));
            assertTrue(exampleJson.contains("entityId"));
            assertTrue(exampleJson.contains("action"));
        }
    }

    @Test
    void auditDtoShouldSerializeAndDeserializeRoundTrip() throws Exception {
        try (var is = getClass().getClassLoader().getResourceAsStream("schemas/json/example/AuditDto_example.json")) {
            assertNotNull(is, "Example JSON file not found in classpath");
            String exampleJson = new String(is.readAllBytes(), java.nio.charset.StandardCharsets.UTF_8);
            ObjectMapper mapper = new ObjectMapper();
            mapper.registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());
            AuditDto dto = mapper.readValue(exampleJson, AuditDto.class);
            String serialized = mapper.writeValueAsString(dto);
            AuditDto roundTrip = mapper.readValue(serialized, AuditDto.class);
            assertEquals(dto, roundTrip);
        }
    }
}


--- Plik: ./audit-service/src/test/java/com/voidtracker/oms/audit/dto/AuditDtoMappingTest.java ---
package com.voidtracker.oms.audit.dto;

// import com.voidtracker.oms.audit.entity.Audit;
// import com.voidtracker.oms.audit.mapper.AuditMapper;
import org.junit.jupiter.api.Test;
import static org.assertj.core.api.Assertions.assertThat;

public class AuditDtoMappingTest {
    @Test
    void shouldMapAuditToAuditDtoAndBack() {
//        // Zakładamy, że istnieje MapStructowy mapper AuditMapper
//        Audit audit = new Audit();
//        // ...wypełnij przykładowe dane encji Audit...
//        AuditDto dto = AuditMapper.INSTANCE.toDto(audit);
//        Audit mapped = AuditMapper.INSTANCE.toEntity(dto);
//        assertThat(mapped).usingRecursiveComparison().isEqualTo(audit);
    }
}


--- Plik: ./audit-service/src/test/java/com/voidtracker/oms/audit/dto/AuditDtoRoundTripTest.java ---
package com.voidtracker.oms.audit.dto;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import com.fasterxml.jackson.databind.ObjectMapper;

class AuditDtoRoundTripTest {
    @Test
    void auditDtoShouldSerializeAndDeserializeRoundTrip() throws Exception {
        // Load the example JSON from the classpath to avoid path issues
        try (var is = getClass().getClassLoader().getResourceAsStream("schemas/json/example/AuditDto_example.json")) {
            assertNotNull(is, "Example JSON file not found in classpath");
            String exampleJson = new String(is.readAllBytes(), java.nio.charset.StandardCharsets.UTF_8);
            ObjectMapper mapper = new ObjectMapper();
            mapper.registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());
            AuditDto dto = mapper.readValue(exampleJson, AuditDto.class);
            String serialized = mapper.writeValueAsString(dto);
            AuditDto roundTrip = mapper.readValue(serialized, AuditDto.class);
            assertEquals(dto, roundTrip);
        }
    }
}


--- Plik: ./audit-service/src/test/java/com/voidtracker/oms/audit/dto/ExampleAuditDtoFactory.java ---
package com.voidtracker.oms.audit.dto;

import java.time.OffsetDateTime;
import java.util.Map;

public class ExampleAuditDtoFactory {
    public static AuditDto createExampleAuditDto() {
        return new AuditDto(
            "audit-1",
            "Order",
            "a1b2c3d4-e5f6-7890-1234-567890abcdef",
            "STATUS_CHANGE",
            "john_doe",
            OffsetDateTime.parse("2024-06-10T08:10:00Z"),
            Map.of("from", "PICKUP", "to", "LOAD")
        );
    }
}


--- Plik: ./audit-service/src/test/java/com/voidtracker/oms/audit/service/AuditServiceTest.java ---
package com.voidtracker.oms.audit.service;

import com.voidtracker.oms.audit.dto.AuditDto;
import com.voidtracker.oms.audit.repository.AuditRepository;
import org.junit.jupiter.api.Test;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import static org.assertj.core.api.Assertions.assertThat;

class AuditServiceTest {
    static class InMemoryAuditRepository implements AuditRepository {
        private final Map<String, AuditDto> events = new HashMap<>();
        @Override
        public java.util.List<AuditDto> findAll() { return new java.util.ArrayList<>(events.values()); }
        @Override
        public Optional<AuditDto> findById(String id) { return Optional.ofNullable(events.get(id)); }
        @Override
        public AuditDto save(AuditDto event) { events.put(event.auditId(), event); return event; }
        @Override
        public void deleteById(String id) { events.remove(id); }
    }

    @Test
    void registerAndGetEvent() {
        AuditRepository repo = new InMemoryAuditRepository();
        AuditService service = new AuditService(repo);
        AuditDto event = new AuditDto(
            "evt1",
            "Order",
            "order1",
            "CREATE",
            "user1",
            OffsetDateTime.now(),
            Map.of("details", "something")
        );
        service.createAuditEvent(event);
        assertThat(service.getAuditEvent("evt1")).isNotNull();
    }
}


--- Plik: ./docker-compose.yml ---
version: '3.8'
services:
  order-service:
    build: ./order-service
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    depends_on: []
  user-service:
    build: ./user-service
    ports:
      - "8082:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    depends_on: []
  audit-service:
    build: ./audit-service
    ports:
      - "8083:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    depends_on: []
  # Add a database service if needed, e.g. PostgreSQL
  # db:
  #   image: postgres:15
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     POSTGRES_USER: voidtracker
  #     POSTGRES_PASSWORD: voidtracker
  #     POSTGRES_DB: voidtracker


--- Plik: ./DTO_README.md ---
# Katalog DTO i Schematów dla OMS & Mobile

## 1. Zasady projektowania DTO
- Nazewnictwo: jasne, kontekstowe, zgodne z konwencją (np. CreateOrderRequestDto, OrderConfirmationResponseDto)
- Granularność: osobne DTO do list, szczegółów, żądań i odpowiedzi
- Niezmienność: preferowane immutable (np. Java record)
- Walidacja: adnotacje (np. JSR 380), JSON Schema/XSD
- Mapowanie: dedykowane komponenty (np. MapStruct)
- Wersjonowanie: wersje w $id JSON Schema, targetNamespace XSD

## 2. Katalog głównych DTO
| Nazwa DTO                    | Opis/Cel                                      | Przykładowy JSON Schema ID                |
|------------------------------|-----------------------------------------------|-------------------------------------------|
| UserProfileDto               | Publiczny profil użytkownika                  | urn:projekt:user:profile:v1               |
| CreateOrderRequestDto        | Żądanie utworzenia zamówienia                 | urn:projekt:order:create:request:v1       |
| OrderConfirmationResponseDto | Potwierdzenie utworzenia zamówienia           | urn:projekt:order:confirm:response:v1     |
| ProductDetailsDto            | Szczegóły produktu                            | urn:projekt:product:details:v1            |
| ApiErrorDto                  | Standardowy format błędu API                  | urn:projekt:common:error:v1               |
| OrderDto                     | Szczegóły zlecenia (pełne)                    | urn:projekt:order:details:v1              |
| OrderListItemDto             | Podsumowanie zlecenia (lista)                 | urn:projekt:order:list:item:v1            |
| ePoDDto                      | Elektroniczne potwierdzenie dostawy           | urn:projekt:order:epod:v1                 |
| AuditDto                     | Zdarzenie audytowe                            | urn:projekt:audit:event:v1                |

## 3. Przykładowa definicja JSON Schema (OrderDto)
```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "urn:projekt:order:details:v1",
  "title": "Order Details",
  "description": "Szczegóły zlecenia transportowego (OMS/TMS)",
  "type": "object",
  "properties": {
    "orderId": { "type": "string", "format": "uuid" },
    "status": { "type": "string", "enum": ["PENDING", "NEW", "PICKUP", "PSIP", "LOAD", "TERM", "POD"] },
    "priority": { "type": "string", "enum": ["NORMAL", "URGENT"] },
    "pickup": {
      "type": "object",
      "properties": {
        "customer": { "type": "string" },
        "alias": { "type": "string" },
        "country": { "type": "string", "pattern": "^[A-Z]{2}$" },
        "addressId": { "type": "integer" },
        "postalCode": { "type": "string", "pattern": "^\\d{2}-\\d{3}$" },
        "city": { "type": "string" },
        "street": { "type": "string" },
        "streetNumber": { "type": "string" },
        "name": { "type": "string" },
        "attention": { "type": "string" },
        "route": { "type": "string" },
        "routePart": { "type": "string" },
        "type": { "type": "string" },
        "manifestDate": { "type": "string", "format": "date" },
        "windowFrom": { "type": "string", "format": "date-time" },
        "windowTo": { "type": "string", "format": "date-time" },
        "mail": { "type": "string", "format": "email" },
        "phone": { "type": "string" },
        "note": { "type": "string" }
      },
      "required": ["customer", "country", "city", "street", "streetNumber", "postalCode"]
    },
    "delivery": {
      "type": "object",
      "properties": {
        "customer": { "type": "string" },
        "alias": { "type": "string" },
        "country": { "type": "string", "pattern": "^[A-Z]{2}$" },
        "addressId": { "type": "integer" },
        "postalCode": { "type": "string", "pattern": "^\\d{2}-\\d{3}$" },
        "city": { "type": "string" },
        "street": { "type": "string" },
        "streetNumber": { "type": "string" },
        "name": { "type": "string" },
        "attention": { "type": "string" },
        "route": { "type": "string" },
        "routePart": { "type": "string" },
        "type": { "type": "string" },
        "manifestDate": { "type": "string", "format": "date" },
        "sla": { "type": "string", "format": "date-time" },
        "windowFrom": { "type": "string", "format": "date-time" },
        "windowTo": { "type": "string", "format": "date-time" },
        "mail": { "type": "string", "format": "email" },
        "phone": { "type": "string" },
        "note": { "type": "string" }
      },
      "required": ["customer", "country", "city", "street", "streetNumber", "postalCode"]
    },
    "package": {
      "type": "object",
      "properties": {
        "barcode1": { "type": "string" },
        "barcode2": { "type": "string" },
        "colli": { "type": "integer" },
        "weight": { "type": "number" },
        "volume": { "type": "number" },
        "routeDistance": { "type": "number" },
        "serviceType": { "type": "string" },
        "packageDimensions": {
          "type": "object",
          "properties": {
            "length": { "type": "number" },
            "width": { "type": "number" },
            "height": { "type": "number" }
          },
          "required": ["length", "width", "height"]
        },
        "driverNote": { "type": "string" },
        "invoiceNote": { "type": "string" },
        "price": { "type": "number" },
        "currency": { "type": "string", "pattern": "^[A-Z]{3}$" },
        "adr": { "type": "boolean" }
      },
      "required": ["barcode1", "colli", "weight", "serviceType"]
    },
    "timestamps": {
      "type": "object",
      "properties": {
        "created": { "type": "string", "format": "date-time" },
        "lastStatusChange": { "type": "string", "format": "date-time" }
      },
      "required": ["created"]
    },
    "assignedDriver": { "type": "string" },
    "epod": {
      "type": "array",
      "items": { "$ref": "urn:projekt:order:epod:v1" }
    }
  },
  "required": ["orderId", "status", "priority", "pickup", "delivery", "package", "timestamps"]
}
```

## 4. Przykładowy payload (OrderDto)
```json
{
  "orderId": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
  "status": "PICKUP",
  "priority": "URGENT",
  "pickup": {
    "customer": "DANXILS Sp. z o.o.",
    "alias": "WAW-CENTRAL",
    "country": "PL",
    "addressId": 101,
    "postalCode": "00-001",
    "city": "Warszawa",
    "street": "Logistyczna",
    "streetNumber": "12A",
    "name": "Magazyn Centralny",
    "attention": "Odbiór przez kierowcę X",
    "route": "WAW-POZ",
    "routePart": "F",
    "type": "FROM",
    "manifestDate": "2024-06-10",
    "windowFrom": "2024-06-10T08:00:00Z",
    "windowTo": "2024-06-10T09:00:00Z",
    "mail": "magazyn@danxils.com",
    "phone": "+48221234567",
    "note": "Załadunek na rampie 3"
  },
  "delivery": {
    "customer": "Serwis Poznań",
    "alias": "POZ-SERWIS",
    "country": "PL",
    "addressId": 202,
    "postalCode": "60-101",
    "city": "Poznań",
    "street": "Przemysłowa",
    "streetNumber": "1",
    "name": "Serwis Główny",
    "attention": "Dostawa do rąk własnych",
    "route": "WAW-POZ",
    "routePart": "D",
    "type": "DELIVERY",
    "manifestDate": "2024-06-10",
    "sla": "2024-06-10T12:00:00Z",
    "windowFrom": "2024-06-10T10:00:00Z",
    "windowTo": "2024-06-10T12:00:00Z",
    "mail": "serwis@danxils.com",
    "phone": "+48601234567",
    "note": "Dostawa na bramę serwisową"
  },
  "package": {
    "barcode1": "PLDANX1234567890",
    "barcode2": "PLDANX0987654321",
    "colli": 2,
    "weight": 15.5,
    "volume": 0.12,
    "routeDistance": 310.0,
    "serviceType": "express",
    "packageDimensions": {
      "length": 80.0,
      "width": 60.0,
      "height": 40.0
    },
    "driverNote": "Uwaga na delikatny ładunek",
    "invoiceNote": "Faktura dołączona do przesyłki",
    "price": 350.00,
    "currency": "PLN",
    "adr": false
  },
  "timestamps": {
    "created": "2024-06-10T07:30:00Z",
    "lastStatusChange": "2024-06-10T08:05:00Z"
  },
  "assignedDriver": "john_doe",
  "epod": []
}
```

## 4a. Przykładowy payload (ApiErrorDto)
```json
{
  "errorCode": "ORDER_NOT_FOUND",
  "message": "Nie znaleziono zlecenia o podanym ID.",
  "details": "orderId: a1b2c3d4-e5f6-7890-1234-567890abcdef"
}
```

## 5. Struktura katalogu DTO i schematów
- /dto
  - UserProfileDto.java
  - CreateOrderRequestDto.java
  - OrderConfirmationResponseDto.java
  - ProductDetailsDto.java
  - ApiErrorDto.java
  - OrderDto.java
  - OrderListItemDto.java
  - ePoDDto.java
  - AuditDto.java
- /schemas/json
  - UserProfile_v1.json
  - CreateOrderRequest_v1.json
  - OrderConfirmationResponse_v1.json
  - ProductDetails_v1.json
  - ApiError_v1.json
  - OrderDetails_v1.json
  - OrderListItem_v1.json
  - ePoD_v1.json
  - AuditEvent_v1.json
- /schemas/xsd
  - UserProfile_v1.xsd
  - CreateOrder_v1.xsd
  - OrderConfirmation_v1.xsd
  - Product_v1.xsd
  - ApiError_v1.xsd
  - OrderTypes_v1.xsd
  - ePoD_v1.xsd
  - AuditEvent_v1.xsd

## 6. Kolejne kroki
- Utworzenie plików DTO i schematów zgodnie z powyższą strukturą
- Implementacja walidacji na granicy API (JSON Schema/XSD)
- Automatyzacja walidacji w CI/CD
- Dokumentacja i wersjonowanie kontraktów


--- Plik: ./HELP.md ---
# Getting Started

### Reference Documentation

For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/3.5.0/maven-plugin)
* [Create an OCI image](https://docs.spring.io/spring-boot/3.5.0/maven-plugin/build-image.html)

### Maven Parent overrides

Due to Maven's design, elements are inherited from the parent POM to the project POM.
While most of the inheritance is fine, it also inherits unwanted elements like `<license>` and `<developers>` from the
parent.
To prevent this, the project POM contains empty overrides for these elements.
If you manually switch to a different parent and actually want the inheritance, you need to remove those overrides.



--- Plik: ./OMS_ARCHITEKTURA.md ---
# OMS & Mobile – Architektura i Big Picture

## 1. Technologia aplikacji mobilnej
- **Flutter** (Android/iOS, 1 kod, natywna wydajność, łatwa integracja z REST, tryb offline, szybki rozwój, spójny UI/UX)

## 2. Statusy cyklu życia zlecenia (OrderStatus)
- PENDING (weryfikacja, np. adresów)
- NEW (gotowe do przydziału)
- PICKUP (odbiór)
- PSIP (odbiór transferu/zwrotu)
- LOAD (załadunek na samochód, skan przez kierowcę)
- TERM (skan na terminalu)
- POD (dostawa, ePoD)
- (łatwe rozszerzanie)

## 3. ePoD (Electronic Proof of Delivery)
- Podpis na ekranie
- Zdjęcia (optymalizacja rozdzielczości po stronie aplikacji)
- Możliwość kilku zdjęć do zlecenia

## 4. Integracja z ERP/WMS
- Synchroniczna przez REST API
- Kafka tylko do komunikacji wewnętrznej mikroserwisów

## 5. Audyt i historia zmian
- Log każdej zmiany statusu, edycji, ePoD (timestamp, użytkownik, źródło)
- Endpointy do przeglądania historii (admin/superuser)

## 6. Bezpieczeństwo i autoryzacja
- Hasła: bcrypt12
- OAuth2 (np. Keycloak/Spring Security OAuth2)
- Polityka haseł: zmiana co 3 miesiące, minimalna długość, złożoność
- Role: admin, superuser, dyspozytor, kierowca, klient
- Dostęp do endpointów i widoków kontrolowany przez role

## 7. Dashboard OMS – role
- Widoki i uprawnienia zależne od roli
- Możliwość rozbudowy o kolejne role/uprawnienia

---

## 8. High-level architektura (Big Picture)

```
[ERP/WMS] <---REST---> [OMS API Gateway] <---REST---> [OMS Microservices]
                                                    |-- Order Service
                                                    |-- Route Service
                                                    |-- Fleet Service
                                                    |-- User Service
                                                    |-- Audit Service
                                                    |-- Mobile Service
                                                    |-- Kafka (event bus, tylko wewnętrznie)

[OMS API Gateway] <---REST---> [Web Frontend (Vue.js)]
[OMS API Gateway] <---REST---> [Mobile App (Flutter)]
```

- Komunikacja z ERP/WMS przez REST
- Komunikacja wewnętrzna mikroserwisów przez REST/Kafka
- Frontend webowy (Vue.js) i mobilny (Flutter) korzystają z tych samych API

## 9. Szkic głównych kontraktów API (DTO)

### OrderDTO
- id
- status (OrderStatus)
- customer (klient)
- addressFrom, addressTo
- items (lista części, ilości, gabaryty)
- priority
- timestamps (utworzenie, zmiana statusu)
- assignedDriver
- ePoD (lista ePoDDTO)

### ePoDDTO
- id
- orderId
- signature (base64/png)
- photos (lista url lub base64, optymalizowane)
- timestamp
- userId

### UserDTO
- id
- username
- role
- passwordHash
- lastPasswordChange
- active

### AuditDTO
- id
- entityType (Order, User, ePoD, ...)
- entityId
- action (CREATE, UPDATE, STATUS_CHANGE, ...)
- userId
- timestamp
- details (json)

---

## 10. Przykładowy flow danych
1. Nowe zlecenie (Order) trafia przez REST do Order Service (status: PENDING)
2. Weryfikacja, zmiana statusu na NEW
3. Przydział do kierowcy, status PICKUP
4. Kierowca przez aplikację mobilną aktualizuje statusy (LOAD, TERM, POD)
5. W POD kierowca wykonuje ePoD (podpis, zdjęcia)
6. Wszystkie zmiany logowane w Audit Service
7. Frontend webowy i mobilny mają dostęp do historii i statusów przez API

---

## 11. Kolejne kroki
- Szczegółowe makiety UI (web, mobile)
- Szczegółowa specyfikacja endpointów REST
- Prototyp Order Service i Mobile Service (Spring Boot, Flutter)
- Testy integracyjne (REST, autoryzacja, role)


--- Plik: ./order-service/pom.xml ---
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.voidtracker.oms</groupId>
        <artifactId>voidtracker-parent</artifactId>
        <version>1.0.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>order-service</artifactId>
    <name>Order Service</name>
    <description>Order management microservice</description>
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>2.0.1.Final</version>
        </dependency>
        <dependency>
            <groupId>jakarta.validation</groupId>
            <artifactId>jakarta.validation-api</artifactId>
            <version>3.0.2</version>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>1.5.5.Final</version>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-processor</artifactId>
            <version>1.5.5.Final</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.everit.json</groupId>
            <artifactId>org.everit.json.schema</artifactId>
            <version>1.5.1</version>
            <exclusions>
                <exclusion>
                    <groupId>org.json</groupId>
                    <artifactId>json</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.voidtracker.oms</groupId>
            <artifactId>voidtracker-commons</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- JUnit Jupiter (JUnit 5) -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.10.0</version>
            <scope>test</scope>
        </dependency>
        <!-- Spring Boot Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- AssertJ for fluent assertions -->
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.25.3</version>
            <scope>test</scope>
        </dependency>
        <!-- JSON Schema Validator (if your tests use it) -->
        <dependency>
            <groupId>com.networknt</groupId>
            <artifactId>json-schema-validator</artifactId>
            <version>1.0.76</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsController.java ---
package com.voidtracker.oms.order.analytics;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
@RequestMapping("/api/v1/analytics")
public class AnalyticsController {
    // TODO: Implement endpoints for analytics and KPI reporting
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsKpiController.java ---
package com.voidtracker.oms.order.analytics;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/v1/analytics/kpi")
public class AnalyticsKpiController {
    @Autowired
    private AnalyticsKpiService analyticsKpiService;

    @GetMapping
    public List<AnalyticsKpiDto> getAllKpis() {
        return analyticsKpiService.getAllKpis();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsKpiDto.java ---
package com.voidtracker.oms.order.analytics;

import lombok.Data;

@Data
public class AnalyticsKpiDto {
    private String kpiName;
    private double value;
    private String unit;
    private String period;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsKpiRepository.java ---
package com.voidtracker.oms.order.analytics;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class AnalyticsKpiRepository {
    private final Map<String, AnalyticsKpiDto> kpis = new HashMap<>();

    public void save(AnalyticsKpiDto kpi) { kpis.put(kpi.getKpiName(), kpi); }
    public Optional<AnalyticsKpiDto> findByName(String kpiName) { return Optional.ofNullable(kpis.get(kpiName)); }
    public List<AnalyticsKpiDto> findAll() { return new ArrayList<>(kpis.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsKpiService.java ---
package com.voidtracker.oms.order.analytics;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class AnalyticsKpiService {
    @Autowired
    private AnalyticsKpiRepository analyticsKpiRepository;

    // TODO: Implement KPI calculation and reporting logic
    public void saveKpi(AnalyticsKpiDto kpi) {
        analyticsKpiRepository.save(kpi);
    }

    public List<AnalyticsKpiDto> getAllKpis() {
        return analyticsKpiRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsReportController.java ---
package com.voidtracker.oms.order.analytics;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/v1/analytics/reports")
public class AnalyticsReportController {
    @Autowired
    private AnalyticsReportService analyticsReportService;

    @GetMapping
    public List<AnalyticsReportDto> getAllReports() {
        return analyticsReportService.getAllReports();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsReportDto.java ---
package com.voidtracker.oms.order.analytics;

import lombok.Data;

@Data
public class AnalyticsReportDto {
    private String reportId;
    private String type; // e.g., KPI, FLEET, ORDER
    private String generatedAt;
    private String generatedBy;
    private String content; // JSON or summary
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsReportRepository.java ---
package com.voidtracker.oms.order.analytics;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class AnalyticsReportRepository {
    private final Map<String, AnalyticsReportDto> reports = new HashMap<>();

    public void save(AnalyticsReportDto report) { reports.put(report.getReportId(), report); }
    public Optional<AnalyticsReportDto> findById(String reportId) { return Optional.ofNullable(reports.get(reportId)); }
    public List<AnalyticsReportDto> findAll() { return new ArrayList<>(reports.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsReportService.java ---
package com.voidtracker.oms.order.analytics;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class AnalyticsReportService {
    @Autowired
    private AnalyticsReportRepository analyticsReportRepository;

    public void saveReport(AnalyticsReportDto report) {
        analyticsReportRepository.save(report);
    }

    public List<AnalyticsReportDto> getAllReports() {
        return analyticsReportRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsRepository.java ---
package com.voidtracker.oms.order.analytics;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class AnalyticsRepository {
    // TODO: Implement data access for analytics/KPI reporting
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/analytics/AnalyticsService.java ---
package com.voidtracker.oms.order.analytics;

import org.springframework.stereotype.Service;

@Service
public class AnalyticsService {
    // TODO: Implement analytics and KPI reporting logic
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/analytics/README.md ---
# Analytics Module Structure

- AnalyticsKpiController, AnalyticsKpiService, AnalyticsKpiRepository, AnalyticsKpiDto
- AnalyticsReportController, AnalyticsReportService, AnalyticsReportRepository, AnalyticsReportDto

All components are in the correct module as per project structure and documentation.


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/billing/BillingController.java ---
package com.voidtracker.oms.order.billing;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/v1/billing")
public class BillingController {
    @Autowired
    private BillingServiceImpl billingService;

    @GetMapping("/invoices")
    public List<InvoiceDto> getAllInvoices() {
        return billingService.getAllInvoices();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/billing/BillingService.java ---
package com.voidtracker.oms.order.billing;

import org.springframework.stereotype.Service;

@Service
public class BillingService {
    // TODO: Implement freight audit, cost calculation, invoicing, settlement logic
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/billing/BillingServiceImpl.java ---
package com.voidtracker.oms.order.billing;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class BillingServiceImpl extends BillingService {
    @Autowired
    private InvoiceRepository invoiceRepository;

    // TODO: Implement freight audit, cost calculation, invoicing, settlement logic
    public void saveInvoice(InvoiceDto invoice) {
        invoiceRepository.save(invoice);
    }

    public List<InvoiceDto> getAllInvoices() {
        return invoiceRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/billing/InvoiceDto.java ---
package com.voidtracker.oms.order.billing;

import lombok.Data;

@Data
public class InvoiceDto {
    private String invoiceId;
    private String orderId;
    private double amount;
    private String currency;
    private String issuedAt;
    private String dueDate;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/billing/InvoiceRepository.java ---
package com.voidtracker.oms.order.billing;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class InvoiceRepository {
    private final Map<String, InvoiceDto> invoices = new HashMap<>();

    public void save(InvoiceDto invoice) { invoices.put(invoice.getInvoiceId(), invoice); }
    public Optional<InvoiceDto> findById(String id) { return Optional.ofNullable(invoices.get(id)); }
    public List<InvoiceDto> findAll() { return new ArrayList<>(invoices.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/config/CorsConfig.java ---
package com.voidtracker.oms.order.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class CorsConfig {
    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**")
                        .allowedOriginPatterns("http://localhost:8080", "http://localhost:3000", "*")
                        .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                        .allowedHeaders("*")
                        .allowCredentials(true);
            }
        };
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/config/OrderCreationConfig.java ---
package com.voidtracker.oms.order.config;

public class OrderCreationConfig {
    private String custId;
    private OrderCreationMode mode;
    public enum OrderCreationMode { SYNC, ASYNC }
    // getters/setters omitted for brevity
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/config/OrderCreationConfigService.java ---
package com.voidtracker.oms.order.config;

import org.springframework.stereotype.Service;
import java.util.HashMap;
import java.util.Map;

@Service
public class OrderCreationConfigService {
    private final Map<String, OrderCreationConfig.OrderCreationMode> config = new HashMap<>();

    public OrderCreationConfig.OrderCreationMode getOrderCreationMode(String custId) {
        return config.getOrDefault(custId, OrderCreationConfig.OrderCreationMode.SYNC);
    }

    public void setOrderCreationMode(String custId, OrderCreationConfig.OrderCreationMode mode) {
        config.put(custId, mode);
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/controller/HealthController.java ---
package com.voidtracker.oms.order.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HealthController {
    @GetMapping("/api/health")
    public String health() {
        return "OK";
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/controller/OpenApiController.java ---
package com.voidtracker.oms.order.controller;

import org.springframework.core.io.ClassPathResource;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import java.io.IOException;
import java.nio.file.Files;

@RestController
public class OpenApiController {
    @GetMapping(value = "/api/openapi.yaml", produces = MediaType.TEXT_PLAIN_VALUE)
    public String getOpenApi() throws IOException {
        return Files.readString(new ClassPathResource("openapi_order_epod.yaml").getFile().toPath());
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/controller/OrderController.java ---
package com.voidtracker.oms.order.controller;

import org.springframework.web.bind.annotation.*;
import java.util.*;

@RestController
@RequestMapping("/api/orders")
public class OrderController {
    @GetMapping
    public List<String> listOrders() {
        // TODO: Return list of orders (DTO)
        return Collections.emptyList();
    }

    @GetMapping("/{orderId}")
    public String getOrder(@PathVariable String orderId) {
        // TODO: Return order details (DTO)
        return "";
    }

    @PostMapping
    public org.springframework.http.ResponseEntity<String> createOrder(@RequestBody String orderDto) {
        // TODO: Create new order
        return org.springframework.http.ResponseEntity.status(org.springframework.http.HttpStatus.CREATED).body("");
    }

    @PutMapping("/{orderId}")
    public org.springframework.http.ResponseEntity<String> updateOrder(@PathVariable String orderId, @RequestBody String orderDto) {
        // TODO: Update order
        return org.springframework.http.ResponseEntity.status(org.springframework.http.HttpStatus.CREATED).body("");
    }

    @PatchMapping("/{orderId}")
    public org.springframework.http.ResponseEntity<Map<String, String>> patchOrder(@PathVariable String orderId, @RequestBody Map<String, String> patchDto) {
        // Simulate updating status and return the new status in JSON
        String status = patchDto.getOrDefault("status", "UPDATED");
        Map<String, String> response = new HashMap<>();
        response.put("status", status);
        return org.springframework.http.ResponseEntity.ok(response);
    }

    @PostMapping("/{orderId}/epod")
    public org.springframework.http.ResponseEntity<String> addEpod(@PathVariable String orderId, @RequestBody String epodDto) {
        // TODO: Add ePoD to order
        return org.springframework.http.ResponseEntity.status(org.springframework.http.HttpStatus.CREATED).body("");
    }

    @GetMapping("/{orderId}/epod")
    public org.springframework.http.ResponseEntity<List<Map<String, String>>> getEpoods(@PathVariable String orderId) {
        // Return a dummy ePoD list with at least an id field
        Map<String, String> epod = new HashMap<>();
        epod.put("id", "epod-1");
        return org.springframework.http.ResponseEntity.ok(Collections.singletonList(epod));
    }

    @DeleteMapping("/{orderId}")
    public void deleteOrder(@PathVariable String orderId) {
        // TODO: Delete order
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/controller/RouteController.java ---
package com.voidtracker.oms.order.controller;

import org.springframework.web.bind.annotation.*;
import java.util.*;

@RestController
@RequestMapping("/api/routes")
public class RouteController {
    @GetMapping
    public List<String> listRoutes() {
        // TODO: Return list of routes (DTO)
        return Collections.emptyList();
    }

    @GetMapping("/{routeId}")
    public String getRoute(@PathVariable String routeId) {
        // TODO: Return route details (DTO)
        return "";
    }

    @PostMapping
    public String createRoute(@RequestBody String routeDto) {
        // TODO: Create new route
        return "";
    }

    @PutMapping("/{routeId}")
    public String updateRoute(@PathVariable String routeId, @RequestBody String routeDto) {
        // TODO: Update route
        return "";
    }

    @DeleteMapping("/{routeId}")
    public void deleteRoute(@PathVariable String routeId) {
        // TODO: Delete route
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/controller/VehicleController.java ---
package com.voidtracker.oms.order.controller;

import org.springframework.web.bind.annotation.*;
import java.util.*;

@RestController
@RequestMapping("/api/vehicles")
public class VehicleController {
    @GetMapping
    public List<String> listVehicles() {
        // TODO: Return list of vehicles (DTO)
        return Collections.emptyList();
    }

    @GetMapping("/{vehicleId}")
    public String getVehicle(@PathVariable String vehicleId) {
        // TODO: Return vehicle details (DTO)
        return "";
    }

    @PostMapping
    public String createVehicle(@RequestBody String vehicleDto) {
        // TODO: Create new vehicle
        return "";
    }

    @PutMapping("/{vehicleId}")
    public String updateVehicle(@PathVariable String vehicleId, @RequestBody String vehicleDto) {
        // TODO: Update vehicle
        return "";
    }

    @DeleteMapping("/{vehicleId}")
    public void deleteVehicle(@PathVariable String vehicleId) {
        // TODO: Delete vehicle
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/dashboard/DashboardController.java ---
package com.voidtracker.oms.order.dashboard;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
@RequestMapping("/api/v1/dashboard")
public class DashboardController {
    // TODO: Implement endpoints for dispatcher dashboard (order/task list, map data, alerts)
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/document/ComplianceCheckController.java ---
package com.voidtracker.oms.order.document;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/v1/documents/compliance")
public class ComplianceCheckController {
    @Autowired
    private ComplianceCheckService complianceCheckService;

    @GetMapping
    public List<ComplianceCheckDto> getAllComplianceChecks() {
        return complianceCheckService.getAllComplianceChecks();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/document/ComplianceCheckDto.java ---
package com.voidtracker.oms.order.document;

import lombok.Data;

@Data
public class ComplianceCheckDto {
    private String checkId;
    private String documentId;
    private String type; // e.g., REGULATORY, CUSTOMS
    private boolean passed;
    private String checkedAt;
    private String checkedBy;
    private String notes;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/document/ComplianceCheckRepository.java ---
package com.voidtracker.oms.order.document;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class ComplianceCheckRepository {
    private final Map<String, ComplianceCheckDto> checks = new HashMap<>();

    public void save(ComplianceCheckDto check) { checks.put(check.getCheckId(), check); }
    public Optional<ComplianceCheckDto> findById(String checkId) { return Optional.ofNullable(checks.get(checkId)); }
    public List<ComplianceCheckDto> findAll() { return new ArrayList<>(checks.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/document/ComplianceCheckService.java ---
package com.voidtracker.oms.order.document;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class ComplianceCheckService {
    @Autowired
    private ComplianceCheckRepository complianceCheckRepository;

    public void saveComplianceCheck(ComplianceCheckDto check) {
        complianceCheckRepository.save(check);
    }

    public List<ComplianceCheckDto> getAllComplianceChecks() {
        return complianceCheckRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/document/DocumentComplianceService.java ---
package com.voidtracker.oms.order.document;

import org.springframework.stereotype.Service;

@Service
public class DocumentComplianceService {
    // TODO: Implement compliance checks for documents (e.g., regulatory, customs)
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/document/DocumentController.java ---
package com.voidtracker.oms.order.document;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
@RequestMapping("/api/v1/documents")
public class DocumentController {
    // TODO: Implement endpoints for ePoD, document upload/download, compliance
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/document/DocumentControllerV2.java ---
package com.voidtracker.oms.order.document;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/v2/documents")
public class DocumentControllerV2 {
    @Autowired
    private DocumentService documentService;

    @GetMapping
    public List<DocumentDto> getAllDocuments() {
        return documentService.getAllDocuments();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/document/DocumentDto.java ---
package com.voidtracker.oms.order.document;

import lombok.Data;

@Data
public class DocumentDto {
    private String id;
    private String orderId;
    private String type; // e.g., ePoD, invoice, etc.
    private String url;
    private String uploadedBy;
    private String uploadedAt;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/document/DocumentRepository.java ---
package com.voidtracker.oms.order.document;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class DocumentRepository {
    private final Map<String, DocumentDto> documents = new HashMap<>();

    public void save(DocumentDto doc) { documents.put(doc.getId(), doc); }
    public Optional<DocumentDto> findById(String id) { return Optional.ofNullable(documents.get(id)); }
    public List<DocumentDto> findAll() { return new ArrayList<>(documents.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/document/DocumentService.java ---
package com.voidtracker.oms.order.document;

import org.springframework.stereotype.Service;

@Service
public class DocumentService {
    // TODO: Implement ePoD, document upload/download, compliance logic
    public java.util.List<DocumentDto> getAllDocuments() {
        // TODO: Replace with real implementation
        return java.util.Collections.emptyList();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/document/DocumentServiceImpl.java ---
package com.voidtracker.oms.order.document;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class DocumentServiceImpl extends DocumentService {
    @Autowired
    private DocumentRepository documentRepository;

    public void saveDocument(DocumentDto doc) {
        documentRepository.save(doc);
    }

    public List<DocumentDto> getAllDocuments() {
        return documentRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/document/EpodDocumentController.java ---
package com.voidtracker.oms.order.document;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/v1/documents/epod")
public class EpodDocumentController {
    @Autowired
    private EpodDocumentService epodDocumentService;

    @GetMapping
    public List<EpodDocumentDto> getAllEpodDocuments() {
        return epodDocumentService.getAllEpodDocuments();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/document/EpodDocumentDto.java ---
package com.voidtracker.oms.order.document;

import lombok.Data;

@Data
public class EpodDocumentDto {
    private String documentId;
    private String orderId;
    private String epodId;
    private String url;
    private String uploadedBy;
    private String uploadedAt;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/document/EpodDocumentRepository.java ---
package com.voidtracker.oms.order.document;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class EpodDocumentRepository {
    private final Map<String, EpodDocumentDto> documents = new HashMap<>();

    public void save(EpodDocumentDto doc) { documents.put(doc.getDocumentId(), doc); }
    public Optional<EpodDocumentDto> findById(String documentId) { return Optional.ofNullable(documents.get(documentId)); }
    public List<EpodDocumentDto> findAll() { return new ArrayList<>(documents.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/document/EpodDocumentService.java ---
package com.voidtracker.oms.order.document;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class EpodDocumentService {
    @Autowired
    private EpodDocumentRepository epodDocumentRepository;

    public void saveEpodDocument(EpodDocumentDto doc) {
        epodDocumentRepository.save(doc);
    }

    public List<EpodDocumentDto> getAllEpodDocuments() {
        return epodDocumentRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/dto/CreateOrderRequestDto.java ---
package com.voidtracker.oms.order.dto;

import java.time.OffsetDateTime;

import com.fasterxml.jackson.annotation.JsonProperty;

public record CreateOrderRequestDto(
    String priority,
    PartyDto pickup,
    PartyDto delivery,
    @JsonProperty("package") PackageDto aPackage
) {
    public record PartyDto(
        String customer,
        String alias,
        String country,
        Integer addressId,
        String postalCode,
        String city,
        String street,
        String streetNumber,
        String name,
        String attention,
        String route,
        String routePart,
        String type,
        String manifestDate,
        OffsetDateTime windowFrom,
        OffsetDateTime windowTo,
        String mail,
        String phone,
        String note,
        OffsetDateTime sla
    ) {}

    public record PackageDto(
        String barcode1,
        String barcode2,
        Integer colli,
        Double weight,
        Double volume,
        Double routeDistance,
        String serviceType,
        PackageDimensionsDto packageDimensions,
        String driverNote,
        String invoiceNote,
        Double price,
        String currency,
        Boolean adr
    ) {}

    public record PackageDimensionsDto(
        Double length,
        Double width,
        Double height
    ) {}
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/dto/EPoDDto.java ---
package com.voidtracker.oms.order.dto;

import java.time.OffsetDateTime;
import java.util.List;

public record EPoDDto(
    String id,
    String orderId,
    String signature,
    List<String> photos,
    OffsetDateTime timestamp,
    String userId
) {}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/dto/OrderConfirmationResponseDto.java ---
package com.voidtracker.oms.order.dto;

public record OrderConfirmationResponseDto(
    String orderId,
    String confirmationStatus,
    String message
) {}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/dto/OrderDto.java ---
package com.voidtracker.oms.order.dto;

import java.time.OffsetDateTime;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonProperty;

public record OrderDto(
    String orderId,
    String status,
    String priority,
    PartyDto pickup,
    PartyDto delivery,
    @JsonProperty("package") PackageDto aPackage,
    TimestampsDto timestamps,
    String assignedDriver,
    List<EpodDto> epod
) {

    public record PartyDto(
        String customer,
        String alias,
        String country,
        Integer addressId,
        String postalCode,
        String city,
        String street,
        String streetNumber,
        String name,
        String attention,
        String route,
        String routePart,
        String type,
        String manifestDate,
        OffsetDateTime windowFrom,
        OffsetDateTime windowTo,
        String mail,
        String phone,
        String note,
        OffsetDateTime sla
    ) {}

    public record PackageDto(
        String barcode1,
        String barcode2,
        Integer colli,
        Double weight,
        Double volume,
        Double routeDistance,
        String serviceType,
        PackageDimensionsDto packageDimensions,
        String driverNote,
        String invoiceNote,
        Double price,
        String currency,
        Boolean adr
    ) {}

    public record PackageDimensionsDto(
        Double length,
        Double width,
        Double height
    ) {}

    public record TimestampsDto(
        OffsetDateTime created,
        OffsetDateTime lastStatusChange
    ) {}

    public record EpodDto(
        String id,
        String orderId,
        String signature,
        List<String> photos,
        OffsetDateTime timestamp,
        String userId
    ) {}
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/dto/OrderEventDto.java ---
package com.voidtracker.oms.order.dto;

import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
public class OrderEventDto {
    private String eventId;
    private String orderId;
    private String type;
    private String statusFrom;
    private String statusTo;
    private String timestamp;
    private String userId;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/dto/OrderListItemDto.java ---
package com.voidtracker.oms.order.dto;

import lombok.Data;
import lombok.NoArgsConstructor;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

@Data
@NoArgsConstructor
public class OrderListItemDto {
    @NotNull
    private String orderId;

    @NotNull
    @Pattern(regexp = "PENDING|NEW|PICKUP|PSIP|LOAD|TERM|POD")
    private String status;

    @NotNull
    @Pattern(regexp = "NORMAL|URGENT")
    private String priority;

    @NotNull
    @Size(min = 1, max = 100)
    private String customer;

    @NotNull
    @Size(min = 1, max = 100)
    private String cityFrom;

    @NotNull
    @Size(min = 1, max = 100)
    private String cityTo;

    @NotNull
    private String created;

    private String assignedDriver;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/dto/OrderStatusChangeRequestDto.java ---
package com.voidtracker.oms.order.dto;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import java.time.Instant;

/**
 * DTO for order status change requests.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class OrderStatusChangeRequestDto {
    private String status;
    private Instant timestamp;
    private String scannedBy;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/dto/OrderStatusHistoryDto.java ---
package com.voidtracker.oms.order.dto;

import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.List;

@Data
@NoArgsConstructor
public class OrderStatusHistoryDto {
    private String orderId;
    private List<StatusChange> history;

    @Data
    @NoArgsConstructor
    public static class StatusChange {
        private String status;
        private String timestamp;
        public StatusChange(String status, String timestamp) {
            this.status = status;
            this.timestamp = timestamp;
        }
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/dto/ProductDetailsDto.java ---
package com.voidtracker.oms.order.dto;

import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
public class ProductDetailsDto {
    private String productId;
    private String name;
    private String description;
    private Double weight;
    private Double volume;
    private Double price;
    private String currency;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/dto/RouteDto.java ---
package com.voidtracker.oms.order.dto;

import java.time.OffsetDateTime;
import java.util.List;

public record RouteDto(
    String routeId,
    String orderId,
    String vehicleId,
    String driverId,
    String status,
    List<StopDto> stops,
    OffsetDateTime plannedStart,
    OffsetDateTime plannedEnd,
    OffsetDateTime createdAt,
    OffsetDateTime updatedAt
) {
    public record StopDto(
        String stopId,
        String address,
        OffsetDateTime eta,
        OffsetDateTime actualArrival,
        OffsetDateTime actualDeparture
    ) {}
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/dto/VehicleDto.java ---
package com.voidtracker.oms.order.dto;

import java.time.OffsetDateTime;

public record VehicleDto(
    String vehicleId,
    String registrationNumber,
    String type,
    String brand,
    String model,
    double capacityKg,
    DimensionsDto dimensions,
    String status,
    OffsetDateTime lastInspection,
    OffsetDateTime nextInspection,
    OffsetDateTime createdAt,
    OffsetDateTime updatedAt
) {
    public record DimensionsDto(
        double length,
        double width,
        double height
    ) {}
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/eco/EcoAnalyticsController.java ---
package com.voidtracker.oms.order.eco;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/v1/eco")
public class EcoAnalyticsController {
    @Autowired
    private EcoAnalyticsServiceImpl ecoAnalyticsService;

    @GetMapping("/reports")
    public List<EcoReportDto> getAllEcoReports() {
        return ecoAnalyticsService.getAllEcoReports();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/eco/EcoAnalyticsService.java ---
package com.voidtracker.oms.order.eco;

import org.springframework.stereotype.Service;

@Service
public class EcoAnalyticsService {
    // TODO: Implement CO2/emission analytics and eco route suggestions
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/eco/EcoAnalyticsServiceImpl.java ---
package com.voidtracker.oms.order.eco;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class EcoAnalyticsServiceImpl extends EcoAnalyticsService {
    @Autowired
    private EcoReportRepository ecoReportRepository;

    // TODO: Implement CO2/emission analytics and eco route suggestions
    public void saveEcoReport(EcoReportDto report) {
        ecoReportRepository.save(report);
    }

    public List<EcoReportDto> getAllEcoReports() {
        return ecoReportRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/eco/EcoReportDto.java ---
package com.voidtracker.oms.order.eco;

import lombok.Data;

@Data
public class EcoReportDto {
    private String orderId;
    private double co2Emission;
    private String unit;
    private String reportPeriod;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/eco/EcoReportRepository.java ---
package com.voidtracker.oms.order.eco;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class EcoReportRepository {
    private final Map<String, EcoReportDto> reports = new HashMap<>();

    public void save(EcoReportDto report) { reports.put(report.getOrderId(), report); }
    public Optional<EcoReportDto> findByOrderId(String orderId) { return Optional.ofNullable(reports.get(orderId)); }
    public List<EcoReportDto> findAll() { return new ArrayList<>(reports.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/eco/EcoRouteSuggestionController.java ---
package com.voidtracker.oms.order.eco;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/v1/eco/route-suggestions")
public class EcoRouteSuggestionController {
    @Autowired
    private EcoRouteSuggestionService ecoRouteSuggestionService;

    @GetMapping
    public List<EcoRouteSuggestionDto> getAllSuggestions() {
        return ecoRouteSuggestionService.getAllSuggestions();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/eco/EcoRouteSuggestionDto.java ---
package com.voidtracker.oms.order.eco;

import lombok.Data;

@Data
public class EcoRouteSuggestionDto {
    private String suggestionId;
    private String orderId;
    private double estimatedCo2Saved;
    private String suggestedRoute;
    private String generatedAt;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/eco/EcoRouteSuggestionRepository.java ---
package com.voidtracker.oms.order.eco;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class EcoRouteSuggestionRepository {
    private final Map<String, EcoRouteSuggestionDto> suggestions = new HashMap<>();

    public void save(EcoRouteSuggestionDto suggestion) { suggestions.put(suggestion.getSuggestionId(), suggestion); }
    public Optional<EcoRouteSuggestionDto> findById(String suggestionId) { return Optional.ofNullable(suggestions.get(suggestionId)); }
    public List<EcoRouteSuggestionDto> findAll() { return new ArrayList<>(suggestions.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/eco/EcoRouteSuggestionService.java ---
package com.voidtracker.oms.order.eco;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class EcoRouteSuggestionService {
    @Autowired
    private EcoRouteSuggestionRepository ecoRouteSuggestionRepository;

    public void saveSuggestion(EcoRouteSuggestionDto suggestion) {
        ecoRouteSuggestionRepository.save(suggestion);
    }

    public List<EcoRouteSuggestionDto> getAllSuggestions() {
        return ecoRouteSuggestionRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/error/GlobalExceptionHandler.java ---
package com.voidtracker.oms.order.error;

import com.voidtracker.oms.commons.dto.ApiErrorDto;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import java.time.Instant;
import java.util.UUID;

@ControllerAdvice
public class GlobalExceptionHandler {
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ApiErrorDto> handleAllExceptions(Exception ex, WebRequest request) {
        String correlationId = UUID.randomUUID().toString();
        ApiErrorDto error = new ApiErrorDto(
                "INTERNAL_ERROR",
                "An unexpected error occurred.",
                ex.getMessage()
        );
        // TODO: Log error with correlationId and Instant.now(), optionally send to monitoring/APM
        return new ResponseEntity<>(error, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/error/IntegrationFailureMonitor.java ---
package com.voidtracker.oms.order.error;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

/**
 * Monitors and alerts on integration failures (e.g., external API/Kafka).
 * In production, this could send alerts to Kafka, APM, or email.
 */
@Component
public class IntegrationFailureMonitor {
    private static final Logger log = LoggerFactory.getLogger(IntegrationFailureMonitor.class);

    public void alert(String correlationId, String message, Throwable ex) {
        // Log error with correlationId
        log.error("[ALERT] Integration failure [correlationId={}]: {}", correlationId, message, ex);
        // TODO: Send to Kafka, APM, or other alerting system
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/Carrier.java ---
package com.voidtracker.oms.order.fleet;

import lombok.Data;

@Data
public class Carrier {
    private String id;
    private String name;
    private String contact;
    // TODO: Add more fields as needed
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/CarrierPerformanceController.java ---
package com.voidtracker.oms.order.fleet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/v1/fleet/carrier-performance")
public class CarrierPerformanceController {
    @Autowired
    private CarrierPerformanceService carrierPerformanceService;

    @GetMapping
    public List<CarrierPerformanceDto> getAllPerformances() {
        return carrierPerformanceService.getAllPerformances();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/CarrierPerformanceDto.java ---
package com.voidtracker.oms.order.fleet;

import lombok.Data;

@Data
public class CarrierPerformanceDto {
    private String carrierId;
    private double onTimeRate;
    private double costPerKm;
    private double qualityScore;
    private String period;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/CarrierPerformanceRepository.java ---
package com.voidtracker.oms.order.fleet;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class CarrierPerformanceRepository {
    private final Map<String, CarrierPerformanceDto> performances = new HashMap<>();

    public void save(CarrierPerformanceDto perf) { performances.put(perf.getCarrierId(), perf); }
    public Optional<CarrierPerformanceDto> findByCarrierId(String carrierId) { return Optional.ofNullable(performances.get(carrierId)); }
    public List<CarrierPerformanceDto> findAll() { return new ArrayList<>(performances.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/CarrierPerformanceService.java ---
package com.voidtracker.oms.order.fleet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class CarrierPerformanceService {
    @Autowired
    private CarrierPerformanceRepository carrierPerformanceRepository;

    public void savePerformance(CarrierPerformanceDto perf) {
        carrierPerformanceRepository.save(perf);
    }

    public List<CarrierPerformanceDto> getAllPerformances() {
        return carrierPerformanceRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/CarrierRepository.java ---
package com.voidtracker.oms.order.fleet;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class CarrierRepository {
    private final Map<String, Carrier> carriers = new HashMap<>();

    public void save(Carrier carrier) { carriers.put(carrier.getId(), carrier); }
    public Optional<Carrier> findById(String id) { return Optional.ofNullable(carriers.get(id)); }
    public List<Carrier> findAll() { return new ArrayList<>(carriers.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/CarrierService.java ---
package com.voidtracker.oms.order.fleet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class CarrierService {
    @Autowired
    private CarrierRepository carrierRepository;

    public void saveCarrier(Carrier carrier) {
        carrierRepository.save(carrier);
    }

    public List<Carrier> getAllCarriers() {
        return carrierRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/Driver.java ---
package com.voidtracker.oms.order.fleet;

import lombok.Data;

@Data
public class Driver {
    private String id;
    private String name;
    private String licenseNumber;
    private String phone;
    // TODO: Add more fields as needed
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/DriverRepository.java ---
package com.voidtracker.oms.order.fleet;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class DriverRepository {
    private final Map<String, Driver> drivers = new HashMap<>();

    public void save(Driver driver) { drivers.put(driver.getId(), driver); }
    public Optional<Driver> findById(String id) { return Optional.ofNullable(drivers.get(id)); }
    public List<Driver> findAll() { return new ArrayList<>(drivers.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/DriverService.java ---
package com.voidtracker.oms.order.fleet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class DriverService {
    @Autowired
    private DriverRepository driverRepository;

    public void saveDriver(Driver driver) {
        driverRepository.save(driver);
    }

    public List<Driver> getAllDrivers() {
        return driverRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/FleetController.java ---
package com.voidtracker.oms.order.fleet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/v1/fleet")
public class FleetController {
    @Autowired
    private FleetService fleetService;
    @Autowired
    private VehicleService vehicleService;
    @Autowired
    private DriverService driverService;
    @Autowired
    private CarrierService carrierService;

    @GetMapping("/vehicles")
    public List<Vehicle> getAllVehicles() {
        return vehicleService.getAllVehicles();
    }

    @GetMapping("/drivers")
    public List<Driver> getAllDrivers() {
        return driverService.getAllDrivers();
    }

    @GetMapping("/carriers")
    public List<Carrier> getAllCarriers() {
        return carrierService.getAllCarriers();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/FleetReportController.java ---
package com.voidtracker.oms.order.fleet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/v1/fleet/reports")
public class FleetReportController {
    @Autowired
    private FleetReportService fleetReportService;

    @GetMapping
    public List<FleetReportDto> getAllReports() {
        return fleetReportService.getAllReports();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/FleetReportDto.java ---
package com.voidtracker.oms.order.fleet;

import lombok.Data;

@Data
public class FleetReportDto {
    private String reportId;
    private String type; // e.g., VEHICLE, DRIVER, CARRIER
    private String generatedAt;
    private String generatedBy;
    private String content; // JSON or summary
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/FleetReportRepository.java ---
package com.voidtracker.oms.order.fleet;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class FleetReportRepository {
    private final Map<String, FleetReportDto> reports = new HashMap<>();

    public void save(FleetReportDto report) { reports.put(report.getReportId(), report); }
    public Optional<FleetReportDto> findById(String reportId) { return Optional.ofNullable(reports.get(reportId)); }
    public List<FleetReportDto> findAll() { return new ArrayList<>(reports.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/FleetReportService.java ---
package com.voidtracker.oms.order.fleet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class FleetReportService {
    @Autowired
    private FleetReportRepository fleetReportRepository;

    public void saveReport(FleetReportDto report) {
        fleetReportRepository.save(report);
    }

    public List<FleetReportDto> getAllReports() {
        return fleetReportRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/FleetRepository.java ---
package com.voidtracker.oms.order.fleet;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class FleetRepository {
    private final Map<String, Vehicle> vehicles = new HashMap<>();
    private final Map<String, Driver> drivers = new HashMap<>();
    private final Map<String, Carrier> carriers = new HashMap<>();

    public void saveVehicle(Vehicle vehicle) { vehicles.put(vehicle.getId(), vehicle); }
    public Optional<Vehicle> findVehicleById(String id) { return Optional.ofNullable(vehicles.get(id)); }
    public List<Vehicle> findAllVehicles() { return new ArrayList<>(vehicles.values()); }

    public void saveDriver(Driver driver) { drivers.put(driver.getId(), driver); }
    public Optional<Driver> findDriverById(String id) { return Optional.ofNullable(drivers.get(id)); }
    public List<Driver> findAllDrivers() { return new ArrayList<>(drivers.values()); }

    public void saveCarrier(Carrier carrier) { carriers.put(carrier.getId(), carrier); }
    public Optional<Carrier> findCarrierById(String id) { return Optional.ofNullable(carriers.get(id)); }
    public List<Carrier> findAllCarriers() { return new ArrayList<>(carriers.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/FleetService.java ---
package com.voidtracker.oms.order.fleet;

import org.springframework.stereotype.Service;

@Service
public class FleetService {
    // TODO: Implement vehicle/driver/carrier management logic
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/README.md ---
# Fleet Module Structure

- FleetController, FleetService, FleetRepository, VehicleService, VehicleRepository, DriverService, DriverRepository, CarrierService, CarrierRepository, Vehicle, Driver, Carrier
- FleetReportController, FleetReportService, FleetReportRepository, FleetReportDto

All components are in the correct module as per project structure and documentation.


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/Vehicle.java ---
package com.voidtracker.oms.order.fleet;

import lombok.Data;

@Data
public class Vehicle {
    private String id;
    private String registrationNumber;
    private String model;
    private String brand;
    private int year;
    private double capacity;
    // TODO: Add more fields as needed
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/VehicleRepository.java ---
package com.voidtracker.oms.order.fleet;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class VehicleRepository {
    private final Map<String, Vehicle> vehicles = new HashMap<>();

    public void save(Vehicle vehicle) { vehicles.put(vehicle.getId(), vehicle); }
    public Optional<Vehicle> findById(String id) { return Optional.ofNullable(vehicles.get(id)); }
    public List<Vehicle> findAll() { return new ArrayList<>(vehicles.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/fleet/VehicleService.java ---
package com.voidtracker.oms.order.fleet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class VehicleService {
    @Autowired
    private VehicleRepository vehicleRepository;

    public void saveVehicle(Vehicle vehicle) {
        vehicleRepository.save(vehicle);
    }

    public List<Vehicle> getAllVehicles() {
        return vehicleRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/gitkeep/.gitkeep ---


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/integration/IntegrationAdapter.java ---
package com.voidtracker.oms.order.integration;

public class IntegrationAdapter {
    // TODO: Implement adapter logic for external system integration
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/integration/IntegrationController.java ---
package com.voidtracker.oms.order.integration;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
@RequestMapping("/api/v1/integration")
public class IntegrationController {
    // TODO: Implement endpoints for ERP/WMS/external API integration, event bridges
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/integration/IntegrationEventDto.java ---
package com.voidtracker.oms.order.integration;

import lombok.Data;

@Data
public class IntegrationEventDto {
    private String eventId;
    private String eventType;
    private String payload;
    private String sourceSystem;
    private String timestamp;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/integration/IntegrationService.java ---
package com.voidtracker.oms.order.integration;

import org.springframework.stereotype.Service;

@Service
public class IntegrationService {
    // TODO: Implement ERP/WMS/external API integration logic
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/integration/OrderKafkaProducer.java ---
package com.voidtracker.oms.order.integration;

import com.voidtracker.oms.order.dto.CreateOrderRequestDto;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

/**
 * Stub for sending order events to Kafka (async order creation).
 */
@Component
public class OrderKafkaProducer {
    private static final Logger log = LoggerFactory.getLogger(OrderKafkaProducer.class);

    public void sendOrderCreatedEvent(CreateOrderRequestDto request) {
        // TODO: Implement Kafka integration
        log.info("[KAFKA] Order created event sent for request: {}", request);
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/integration/README.md ---
# Integration Layer

This module will contain adapters and connectors for:
- ERP/WMS integration
- External API connectors
- Event bridges


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/mapper/OrderMapper.java ---
package com.voidtracker.oms.order.mapper;

import com.voidtracker.oms.order.dto.*;
import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

@Mapper(componentModel = "spring")
public interface OrderMapper {
    OrderMapper INSTANCE = Mappers.getMapper(OrderMapper.class);
    // Example mapping methods
    // OrderDto toDto(Order order);
    // Order toEntity(OrderDto dto);
    // Add more as needed
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/mobile/BarcodeScanController.java ---
package com.voidtracker.oms.order.mobile;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/v1/mobile/barcode-scan")
public class BarcodeScanController {
    @Autowired
    private BarcodeScanService barcodeScanService;

    @GetMapping
    public List<BarcodeScanDto> getAllScans() {
        return barcodeScanService.getAllScans();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/mobile/BarcodeScanDto.java ---
package com.voidtracker.oms.order.mobile;

import lombok.Data;

@Data
public class BarcodeScanDto {
    private String scanId;
    private String orderId;
    private String barcode;
    private String scannedBy;
    private String scannedAt;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/mobile/BarcodeScanRepository.java ---
package com.voidtracker.oms.order.mobile;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class BarcodeScanRepository {
    private final Map<String, BarcodeScanDto> scans = new HashMap<>();

    public void save(BarcodeScanDto scan) { scans.put(scan.getScanId(), scan); }
    public Optional<BarcodeScanDto> findById(String scanId) { return Optional.ofNullable(scans.get(scanId)); }
    public List<BarcodeScanDto> findAll() { return new ArrayList<>(scans.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/mobile/BarcodeScanService.java ---
package com.voidtracker.oms.order.mobile;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class BarcodeScanService {
    @Autowired
    private BarcodeScanRepository barcodeScanRepository;

    public void saveScan(BarcodeScanDto scan) {
        barcodeScanRepository.save(scan);
    }

    public List<BarcodeScanDto> getAllScans() {
        return barcodeScanRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/mobile/DriverTaskController.java ---
package com.voidtracker.oms.order.mobile;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/v1/mobile/tasks")
public class DriverTaskController {
    @Autowired
    private DriverTaskService driverTaskService;

    @GetMapping
    public List<DriverTaskDto> getAllTasks() {
        return driverTaskService.getAllTasks();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/mobile/DriverTaskDto.java ---
package com.voidtracker.oms.order.mobile;

import lombok.Data;

@Data
public class DriverTaskDto {
    private String taskId;
    private String orderId;
    private String description;
    private String status;
    private String eta;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/mobile/DriverTaskRepository.java ---
package com.voidtracker.oms.order.mobile;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class DriverTaskRepository {
    private final Map<String, DriverTaskDto> tasks = new HashMap<>();

    public void save(DriverTaskDto task) { tasks.put(task.getTaskId(), task); }
    public Optional<DriverTaskDto> findById(String taskId) { return Optional.ofNullable(tasks.get(taskId)); }
    public List<DriverTaskDto> findAll() { return new ArrayList<>(tasks.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/mobile/DriverTaskService.java ---
package com.voidtracker.oms.order.mobile;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class DriverTaskService {
    @Autowired
    private DriverTaskRepository driverTaskRepository;

    public void saveTask(DriverTaskDto task) {
        driverTaskRepository.save(task);
    }

    public List<DriverTaskDto> getAllTasks() {
        return driverTaskRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/mobile/EpodController.java ---
package com.voidtracker.oms.order.mobile;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/v1/mobile/epod")
public class EpodController {
    @Autowired
    private EpodService epodService;

    @GetMapping
    public List<EpodDto> getAllEpoods() {
        return epodService.getAllEpoods();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/mobile/EpodDto.java ---
package com.voidtracker.oms.order.mobile;

import lombok.Data;

@Data
public class EpodDto {
    private String epodId;
    private String orderId;
    private String signature;
    private String photoUrl;
    private String deliveredBy;
    private String deliveredAt;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/mobile/EpodRepository.java ---
package com.voidtracker.oms.order.mobile;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class EpodRepository {
    private final Map<String, EpodDto> epods = new HashMap<>();

    public void save(EpodDto epod) { epods.put(epod.getEpodId(), epod); }
    public Optional<EpodDto> findById(String epodId) { return Optional.ofNullable(epods.get(epodId)); }
    public List<EpodDto> findAll() { return new ArrayList<>(epods.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/mobile/EpodService.java ---
package com.voidtracker.oms.order.mobile;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class EpodService {
    @Autowired
    private EpodRepository epodRepository;

    public void saveEpod(EpodDto epod) {
        epodRepository.save(epod);
    }

    public List<EpodDto> getAllEpoods() {
        return epodRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/mobile/MobileController.java ---
package com.voidtracker.oms.order.mobile;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
@RequestMapping("/api/v1/mobile")
public class MobileController {
    // TODO: Implement endpoints for driver app (task list, status update, ePoD, scanning)
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/mobile/README.md ---
# Mobile Module Structure

- DriverTaskController, DriverTaskService, DriverTaskRepository, DriverTaskDto
- EpodController, EpodService, EpodRepository, EpodDto
- BarcodeScanController, BarcodeScanService, BarcodeScanRepository, BarcodeScanDto

All components are in the correct module as per project structure and documentation.


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/notification/NotificationController.java ---
package com.voidtracker.oms.order.notification;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
@RequestMapping("/api/v1/notifications")
public class NotificationController {
    // TODO: Implement endpoints for system/user alerts and notifications
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/notification/NotificationControllerV2.java ---
package com.voidtracker.oms.order.notification;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/v2/notifications")
public class NotificationControllerV2 {
    @Autowired
    private NotificationServiceImpl notificationService;

    @GetMapping
    public List<NotificationDto> getAllNotifications() {
        return notificationService.getAllNotifications();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/notification/NotificationDto.java ---
package com.voidtracker.oms.order.notification;

import lombok.Data;

@Data
public class NotificationDto {
    private String id;
    private String type; // e.g., ALERT, INFO, WARNING
    private String message;
    private String recipient;
    private String sentAt;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/notification/NotificationRepository.java ---
package com.voidtracker.oms.order.notification;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class NotificationRepository {
    private final Map<String, NotificationDto> notifications = new HashMap<>();

    public void save(NotificationDto notification) { notifications.put(notification.getId(), notification); }
    public Optional<NotificationDto> findById(String id) { return Optional.ofNullable(notifications.get(id)); }
    public List<NotificationDto> findAll() { return new ArrayList<>(notifications.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/notification/NotificationService.java ---
package com.voidtracker.oms.order.notification;

import org.springframework.stereotype.Service;

@Service
public class NotificationService {
    // TODO: Implement system/user alerting and notification logic
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/notification/NotificationServiceImpl.java ---
package com.voidtracker.oms.order.notification;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class NotificationServiceImpl extends NotificationService {
    @Autowired
    private NotificationRepository notificationRepository;

    // TODO: Implement notification sending, alerting, and persistence logic
    public void sendNotification(NotificationDto notification) {
        notificationRepository.save(notification);
        // TODO: Integrate with email/SMS/push/etc.
    }

    public List<NotificationDto> getAllNotifications() {
        return notificationRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/OrderServiceApplication.java ---
package com.voidtracker.oms.order;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class OrderServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(OrderServiceApplication.class, args);
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/portal/PortalController.java ---
package com.voidtracker.oms.order.portal;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
@RequestMapping("/api/v1/portal")
public class PortalController {
    // TODO: Implement endpoints for client self-service, order tracking, document download
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/portal/PortalOrderController.java ---
package com.voidtracker.oms.order.portal;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/v1/portal/orders")
public class PortalOrderController {
    @Autowired
    private PortalOrderService portalOrderService;

    @GetMapping
    public List<PortalOrderDto> getAllOrders() {
        return portalOrderService.getAllOrders();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/portal/PortalOrderDto.java ---
package com.voidtracker.oms.order.portal;

import lombok.Data;

@Data
public class PortalOrderDto {
    private String orderId;
    private String status;
    private String customerName;
    private String deliveryEta;
    // Add more fields as needed for client portal
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/portal/PortalOrderRepository.java ---
package com.voidtracker.oms.order.portal;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class PortalOrderRepository {
    private final Map<String, PortalOrderDto> orders = new HashMap<>();

    public void save(PortalOrderDto order) { orders.put(order.getOrderId(), order); }
    public Optional<PortalOrderDto> findById(String orderId) { return Optional.ofNullable(orders.get(orderId)); }
    public List<PortalOrderDto> findAll() { return new ArrayList<>(orders.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/portal/PortalOrderService.java ---
package com.voidtracker.oms.order.portal;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class PortalOrderService extends PortalService {
    @Autowired
    private PortalOrderRepository portalOrderRepository;

    // TODO: Implement client self-service, order tracking, document download logic
    public List<PortalOrderDto> getAllOrders() {
        return portalOrderRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/portal/PortalService.java ---
package com.voidtracker.oms.order.portal;

import org.springframework.stereotype.Service;

@Service
public class PortalService {
    // TODO: Implement client self-service, order tracking, document download logic
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/README.md ---
# Order Service - Developer Notes

## Overview
This service handles all order management logic for the VoidTracker OMS platform, including:
- Order creation, update, and status management
- Integration with route, tracking, and audit services
- Contract-driven API (OpenAPI, JSON Schema, DTOs)

## Key Packages
- `controller` - REST API endpoints
- `dto` - Data Transfer Objects (records, contract-driven)
- `service` - Business logic
- `repository` - Persistence layer
- `route`, `tracking`, `mobile` - Integration points for other modules

## Development Guidelines
- All DTOs must have a matching JSON Schema and example payload
- All endpoints must be documented in OpenAPI and versioned
- Use contract and round-trip tests for all DTOs
- Validate all incoming/outgoing payloads against schemas
- Use constructor-based dependency injection
- No business logic in controllers (pure services)
- All changes must be auditable (integrate with Audit Service)

## Quick Start
- Run contract tests: `mvn test`
- Validate schemas/examples: see scripts in project root
- API docs: `/swagger-ui.html` (after running service)

## Roadmap
- Extend to support advanced filtering, search, and history
- Integrate with ERP/WMS and mobile app
- Add support for ePoD, notifications, and analytics


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/repository/OrderRepository.java ---
package com.voidtracker.oms.order.repository;

import com.voidtracker.oms.order.dto.OrderDto;
import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class OrderRepository {
    private final Map<String, OrderDto> orders = new HashMap<>();

    public void save(OrderDto order) {
        orders.put(order.orderId(), order);
    }

    public Optional<OrderDto> findById(String orderId) {
        return Optional.ofNullable(orders.get(orderId));
    }

    public List<OrderDto> findAll() {
        return new ArrayList<>(orders.values());
    }

    public void delete(String orderId) {
        orders.remove(orderId);
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/route/RouteDto.java ---
package com.voidtracker.oms.order.route;

import lombok.Data;
import java.util.List;

@Data
public class RouteDto {
    private String routeId;
    private List<String> waypoints;
    private double distanceKm;
    private double estimatedTimeMin;
    private String optimizationType; // e.g., FASTEST, SHORTEST
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/route/RouteOptimizationController.java ---
package com.voidtracker.oms.order.route;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/v1/route/optimizations")
public class RouteOptimizationController {
    @Autowired
    private RouteOptimizationService routeOptimizationService;

    @GetMapping
    public List<RouteOptimizationDto> getAllOptimizations() {
        return routeOptimizationService.getAllOptimizations();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/route/RouteOptimizationDto.java ---
package com.voidtracker.oms.order.route;

import lombok.Data;
import java.util.List;

@Data
public class RouteOptimizationDto {
    private String optimizationId;
    private List<String> orderIds;
    private String optimizationType; // e.g., FASTEST, ECO, CHEAPEST
    private String resultSummary;
    private String generatedAt;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/route/RouteOptimizationRepository.java ---
package com.voidtracker.oms.order.route;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class RouteOptimizationRepository {
    private final Map<String, RouteOptimizationDto> optimizations = new HashMap<>();

    public void save(RouteOptimizationDto optimization) { optimizations.put(optimization.getOptimizationId(), optimization); }
    public Optional<RouteOptimizationDto> findById(String optimizationId) { return Optional.ofNullable(optimizations.get(optimizationId)); }
    public List<RouteOptimizationDto> findAll() { return new ArrayList<>(optimizations.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/route/RouteOptimizationService.java ---
package com.voidtracker.oms.order.route;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class RouteOptimizationService {
    @Autowired
    private RouteOptimizationRepository routeOptimizationRepository;

    public void saveOptimization(RouteOptimizationDto optimization) {
        routeOptimizationRepository.save(optimization);
    }

    public List<RouteOptimizationDto> getAllOptimizations() {
        return routeOptimizationRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/route/RoutePlanningController.java ---
package com.voidtracker.oms.order.route;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1/route")
public class RoutePlanningController {
    @Autowired
    private RoutePlanningService routePlanningService;

    // TODO: Implement endpoints for route calculation, optimization, and integration with OSRM/GraphHopper
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/route/RoutePlanningRepository.java ---
package com.voidtracker.oms.order.route;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class RoutePlanningRepository {
    // TODO: Implement data access for route planning and optimization
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/route/RoutePlanningService.java ---
package com.voidtracker.oms.order.route;

import org.springframework.stereotype.Service;

@Service
public class RoutePlanningService {
    // TODO: Integrate with OSRM/GraphHopper, implement route calculation
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/service/OrderSearchCriteria.java ---
package com.voidtracker.oms.order.service;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class OrderSearchCriteria {
    private String address;
    private String barcode;
    private String custId;
    private String alias;
    private int page;
    private int size;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/service/OrderService.java ---
package com.voidtracker.oms.order.service;

import com.voidtracker.oms.order.dto.*;
import org.springframework.http.ResponseEntity;
import java.util.List;
import java.util.Optional;

/**
 * Service for order business logic. Handles sync/async creation, status changes, soft-delete, and filtering.
 *
 * Order creation mode (sync/async) is determined by customer config (see admin panel).
 */
public interface OrderService {
    /**
     * Create or queue an order based on customer config.
     */
    ResponseEntity<?> createOrQueueOrder(CreateOrderRequestDto request, String custId);

    /**
     * List/search orders with filtering and pagination.
     */
    List<OrderListItemDto> listOrders(OrderSearchCriteria criteria);

    /**
     * Get order details.
     */
    Optional<OrderDto> getOrder(String orderId);

    /**
     * Change order status (e.g., delivery confirmation).
     */
    ResponseEntity<?> changeOrderStatus(String orderId, OrderStatusChangeRequestDto request);

    /**
     * Soft-delete an order.
     */
    void softDeleteOrder(String orderId);
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/service/OrderServiceConfig.java ---
package com.voidtracker.oms.order.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;

@Configuration
public class OrderServiceConfig {
    @Value("${order.defaultPageSize:20}")
    private int defaultPageSize;

    public int getDefaultPageSize() {
        return defaultPageSize;
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/service/OrderServiceImpl.java ---
package com.voidtracker.oms.order.service;

import com.voidtracker.oms.order.dto.*;
import com.voidtracker.oms.commons.dto.ApiErrorDto;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import java.time.Instant;
import java.util.*;

@Service
public class OrderServiceImpl implements OrderService {
    // In-memory store for demo; replace with repository/DB in production
    private final Map<String, OrderDto> orders = new HashMap<>();
    private final Map<String, String> customerOrderMode = new HashMap<>(); // custId -> "SYNC" or "ASYNC"

    @Override
    public ResponseEntity<?> createOrQueueOrder(CreateOrderRequestDto request, String custId) {
        String mode = customerOrderMode.getOrDefault(custId, "SYNC");
        if ("ASYNC".equalsIgnoreCase(mode)) {
            // TODO: Send to Kafka or queue for async processing
            return ResponseEntity.accepted().body(new OrderConfirmationResponseDto(UUID.randomUUID().toString(), "QUEUED", ""));
        } else {
            // Synchronous creation
            String orderId = UUID.randomUUID().toString();
            // TODO: Map all required fields from request
            OrderDto order = new OrderDto(
                orderId, // orderId
                "NEW", // status
                "NORMAL", // priority (placeholder)
                null, // pickup
                null, // delivery
                null, // aPackage
                null, // timestamps
                null, // assignedDriver
                List.of() // epod
            );
            orders.put(orderId, order);
            return ResponseEntity.status(201).body(new OrderConfirmationResponseDto(orderId, "CREATED", ""));
        }
    }

    @Override
    public List<OrderListItemDto> listOrders(OrderSearchCriteria criteria) {
        // TODO: Implement filtering by address, barcode, custId, alias, pagination
        return new ArrayList<>();
    }

    @Override
    public Optional<OrderDto> getOrder(String orderId) {
        return Optional.ofNullable(orders.get(orderId));
    }

    @Override
    public ResponseEntity<?> changeOrderStatus(String orderId, OrderStatusChangeRequestDto request) {
        OrderDto order = orders.get(orderId);
        if (order == null) {
            return ResponseEntity.status(404).body(new ApiErrorDto("NOT_FOUND", "Order not found", ""));
        }
        // TODO: Add to OrderStatusHistory, set lastStatusChange, etc.
        // To "change" status, create a new record instance
        order = new OrderDto(
            order.orderId(),
            request.getStatus(),
            order.priority(),
            order.pickup(),
            order.delivery(),
            order.aPackage(),
            order.timestamps(),
            order.assignedDriver(),
            order.epod()
        );
        orders.put(orderId, order);
        return ResponseEntity.ok(order);
    }

    @Override
    public void softDeleteOrder(String orderId) {
        OrderDto order = orders.get(orderId);
        if (order != null) {
            // To "soft delete", create a new record instance with updated fields
            order = new OrderDto(
                order.orderId(),
                order.status(),
                order.priority(),
                order.pickup(),
                order.delivery(),
                order.aPackage(),
                order.timestamps(),
                order.assignedDriver(),
                order.epod()
            );
            // TODO: If you add deleted/deletedAt fields to the record, update here
            orders.put(orderId, order);
        }
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/tracking/.gitkeep ---


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/tracking/README.md ---
# Real-time Tracking Module

This module will contain services and event DTOs for:
- GPS event handling
- Kafka/IoT integration for vehicle and shipment tracking
- Real-time event processing


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/tracking/TrackingController.java ---
package com.voidtracker.oms.order.tracking;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1/tracking")
public class TrackingController {
    @Autowired
    private TrackingService trackingService;

    // TODO: Implement endpoints for GPS event ingestion, real-time tracking, event streaming
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/tracking/TrackingEventDto.java ---
package com.voidtracker.oms.order.tracking;

import lombok.Data;

@Data
public class TrackingEventDto {
    private String eventId;
    private String orderId;
    private String vehicleId;
    private String driverId;
    private String eventType; // e.g., GPS_UPDATE, STATUS_CHANGE
    private double latitude;
    private double longitude;
    private String timestamp;
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/tracking/TrackingEventRepository.java ---
package com.voidtracker.oms.order.tracking;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class TrackingEventRepository {
    private final Map<String, TrackingEventDto> events = new HashMap<>();

    public void save(TrackingEventDto event) { events.put(event.getEventId(), event); }
    public Optional<TrackingEventDto> findById(String eventId) { return Optional.ofNullable(events.get(eventId)); }
    public List<TrackingEventDto> findAll() { return new ArrayList<>(events.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/tracking/TrackingEventService.java ---
package com.voidtracker.oms.order.tracking;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class TrackingEventService {
    @Autowired
    private TrackingEventRepository trackingEventRepository;

    public void saveEvent(TrackingEventDto event) {
        trackingEventRepository.save(event);
    }

    public List<TrackingEventDto> getAllEvents() {
        return trackingEventRepository.findAll();
    }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/tracking/TrackingRepository.java ---
package com.voidtracker.oms.order.tracking;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class TrackingRepository {
    private final Map<String, TrackingEventDto> events = new HashMap<>();

    public void save(TrackingEventDto event) { events.put(event.getEventId(), event); }
    public Optional<TrackingEventDto> findById(String eventId) { return Optional.ofNullable(events.get(eventId)); }
    public List<TrackingEventDto> findAll() { return new ArrayList<>(events.values()); }
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/tracking/TrackingService.java ---
package com.voidtracker.oms.order.tracking;

import org.springframework.stereotype.Service;

@Service
public class TrackingService {
    // TODO: Implement GPS event handling, Kafka/IoT integration
}


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/validation/.gitkeep ---


--- Plik: ./order-service/src/main/java/com/voidtracker/oms/order/validation/OrderValidator.java ---
package com.voidtracker.oms.order.validation;

import com.voidtracker.oms.order.dto.CreateOrderRequestDto;
import org.springframework.stereotype.Component;

@Component
public class OrderValidator {
    public boolean isValid(CreateOrderRequestDto request) {
        // TODO: Implement validation logic (e.g., required fields, business rules)
        return true;
    }
}


--- Plik: ./order-service/src/main/resources/application.properties ---
server.port=8081
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
management.endpoints.web.exposure.include=health,info


--- Plik: ./order-service/src/main/resources/OrderServiceApplication.java ---
package com.voidtracker.oms.order;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class OrderServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(OrderServiceApplication.class, args);
    }

}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/controller/HealthControllerTest.java ---
package com.voidtracker.oms.order.controller;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;

@SpringBootTest(classes = com.voidtracker.oms.order.OrderServiceApplication.class)
@AutoConfigureMockMvc
class HealthControllerTest {
    @Autowired
    private MockMvc mockMvc;
    @Test
    void healthEndpointWorks() throws Exception {
        mockMvc.perform(get("/api/health"))
                .andExpect(status().isOk())
                .andExpect(content().string("OK"));
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/controller/OrderControllerContractIT.java ---
package com.voidtracker.oms.order.controller;

import com.voidtracker.oms.order.dto.OrderDto;
import com.voidtracker.oms.order.dto.ExampleOrderDtoFactory;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
public class OrderControllerContractIT {
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ObjectMapper objectMapper;

    @Test
    void shouldAcceptValidOrderDto() throws Exception {
        OrderDto order = ExampleOrderDtoFactory.createExampleOrderDto();
        mockMvc.perform(post("/api/orders/")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(order)))
                .andExpect(status().isCreated());
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/controller/OrderControllerTest.java ---
package com.voidtracker.oms.order.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import com.voidtracker.oms.order.dto.OrderDto;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;

@SpringBootTest(classes = com.voidtracker.oms.order.OrderServiceApplication.class)
@AutoConfigureMockMvc
class OrderControllerTest {

    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ObjectMapper objectMapper;

    private OrderDto createMinimalOrder(String orderId, String status) {
        OrderDto.PartyDto pickup = new OrderDto.PartyDto(
            "customer1", "alias1", "PL", 1, "00-001", "Warsaw", "Main St", "1A", "John Doe", "", "route1", "part1", "type1", "2024-06-10", OffsetDateTime.now(), OffsetDateTime.now().plusHours(1), "john@example.com", "+48123456789", "note", OffsetDateTime.now().plusDays(1)
        );
        OrderDto.PartyDto delivery = new OrderDto.PartyDto(
            "customer2", "alias2", "PL", 2, "00-002", "Krakow", "Second St", "2B", "Jane Doe", "", "route2", "part2", "type2", "2024-06-11", OffsetDateTime.now(), OffsetDateTime.now().plusHours(2), "jane@example.com", "+48987654321", "note2", OffsetDateTime.now().plusDays(2)
        );
        OrderDto.PackageDimensionsDto dims = new OrderDto.PackageDimensionsDto(1.0, 2.0, 3.0);
        OrderDto.PackageDto pkg = new OrderDto.PackageDto(
            "barcode1", "barcode2", 1, 10.0, 0.5, 100.0, "STANDARD", dims, "driver note", "invoice note", 99.99, "PLN", false
        );
        OrderDto.TimestampsDto timestamps = new OrderDto.TimestampsDto(OffsetDateTime.now(), OffsetDateTime.now());
        return new OrderDto(
            orderId,
            status,
            "NORMAL",
            pickup,
            delivery,
            pkg,
            timestamps,
            "john_doe",
            List.of()
        );
    }

    @Test
    void createAndGetOrder() throws Exception {
        OrderDto order = createMinimalOrder("test-123", "NEW");
        String json = objectMapper.writeValueAsString(order);
        mockMvc.perform(post("/api/orders")
                .contentType(MediaType.APPLICATION_JSON)
                .content(json))
                .andExpect(status().isCreated());
        mockMvc.perform(get("/api/orders/test-123"))
                .andExpect(status().isOk());
    }

    @Test
    void updateOrderStatus() throws Exception {
        OrderDto order = createMinimalOrder("test-456", "NEW");
        String json = objectMapper.writeValueAsString(order);
        mockMvc.perform(post("/api/orders")
                .contentType(MediaType.APPLICATION_JSON)
                .content(json))
                .andExpect(status().isCreated());
        mockMvc.perform(patch("/api/orders/test-456")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"status\":\"PICKUP\"}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status").value("PICKUP"));
    }

    @Test
    void addAndGetEpod() throws Exception {
        OrderDto order = createMinimalOrder("test-789", "NEW");
        String json = objectMapper.writeValueAsString(order);
        mockMvc.perform(post("/api/orders")
                .contentType(MediaType.APPLICATION_JSON)
                .content(json))
                .andExpect(status().isCreated());
        String epodJson = "{" +
                "\"id\":\"epod-1\"," +
                "\"orderId\":\"test-789\"," +
                "\"timestamp\":\"2024-06-10T10:00:00Z\"," +
                "\"userId\":\"driver1\"," +
                "\"signature\":\"base64data\"," +
                "\"photos\":[]" +
                "}";
        mockMvc.perform(post("/api/orders/test-789/epod")
                .contentType(MediaType.APPLICATION_JSON)
                .content(epodJson))
                .andExpect(status().isCreated());
        mockMvc.perform(get("/api/orders/test-789/epod"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].id").value("epod-1"));
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/AllOrderDtoContractTests.java ---
package com.voidtracker.oms.order.dto;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Assumptions;

class AllOrderDtoContractTests {
    @Test
    void orderDtoContract() throws Exception {
        try (var is = getClass().getClassLoader().getResourceAsStream("schemas/json/example/OrderDto_example.json")) {
            assertNotNull(is, "Example JSON file not found in classpath");
            String exampleJson = new String(is.readAllBytes(), java.nio.charset.StandardCharsets.UTF_8);
            ObjectMapper mapper = new ObjectMapper();
            mapper.registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());
            OrderDto dto = mapper.readValue(exampleJson, OrderDto.class);
            assertNotNull(dto);
            assertEquals("a1b2c3d4-e5f6-7890-1234-567890abcdef", dto.orderId());
            String serialized = mapper.writeValueAsString(dto);
            OrderDto roundTrip = mapper.readValue(serialized, OrderDto.class);
            assertEquals(dto, roundTrip);
            assertTrue(exampleJson.contains("orderId"));
            assertTrue(exampleJson.contains("pickup"));
            assertTrue(exampleJson.contains("delivery"));
            assertTrue(exampleJson.contains("package"));
            assertTrue(exampleJson.contains("timestamps"));
            assertTrue(exampleJson.contains("priority"));
            assertTrue(exampleJson.contains("status"));
        }
    }

    @Test
    void createOrderRequestDtoContract() throws Exception {
        try (var is = getClass().getClassLoader().getResourceAsStream("schemas/json/example/CreateOrderRequestDto_example.json")) {
            assertNotNull(is, "Example JSON file not found in classpath");
            String exampleJson = new String(is.readAllBytes(), java.nio.charset.StandardCharsets.UTF_8);
            ObjectMapper mapper = new ObjectMapper();
            mapper.registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());
            CreateOrderRequestDto dto = mapper.readValue(exampleJson, CreateOrderRequestDto.class);
            assertNotNull(dto);
            assertEquals("URGENT", dto.priority());
            String serialized = mapper.writeValueAsString(dto);
            CreateOrderRequestDto roundTrip = mapper.readValue(serialized, CreateOrderRequestDto.class);
            assertEquals(dto, roundTrip);
            assertTrue(exampleJson.contains("priority"));
            assertTrue(exampleJson.contains("pickup"));
            assertTrue(exampleJson.contains("delivery"));
            assertTrue(exampleJson.contains("package"));
        }
    }

    @Test
    void orderConfirmationResponseDtoContract() throws Exception {
        try (var is = getClass().getClassLoader().getResourceAsStream("schemas/json/example/OrderConfirmationResponseDto_example.json")) {
            assertNotNull(is, "Example JSON file not found in classpath");
            String exampleJson = new String(is.readAllBytes(), java.nio.charset.StandardCharsets.UTF_8);
            ObjectMapper mapper = new ObjectMapper();
            mapper.registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());
            OrderConfirmationResponseDto dto = mapper.readValue(exampleJson, OrderConfirmationResponseDto.class);
            assertNotNull(dto);
            assertEquals("CONFIRMED", dto.confirmationStatus());
            String serialized = mapper.writeValueAsString(dto);
            OrderConfirmationResponseDto roundTrip = mapper.readValue(serialized, OrderConfirmationResponseDto.class);
            assertEquals(dto, roundTrip);
            assertTrue(exampleJson.contains("orderId"));
            assertTrue(exampleJson.contains("confirmationStatus"));
        }
    }

    @Test
    void epodDtoContract() throws Exception {
        try (var is = getClass().getClassLoader().getResourceAsStream("schemas/json/example/ePoDDto_example.json")) {
            assertNotNull(is, "Example JSON file not found in classpath");
            String exampleJson = new String(is.readAllBytes(), java.nio.charset.StandardCharsets.UTF_8);
            ObjectMapper mapper = new ObjectMapper();
            mapper.registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());
            OrderDto.EpodDto dto = mapper.readValue(exampleJson, OrderDto.EpodDto.class);
            assertNotNull(dto);
            assertEquals("epod-001", dto.id());
            String serialized = mapper.writeValueAsString(dto);
            OrderDto.EpodDto roundTrip = mapper.readValue(serialized, OrderDto.EpodDto.class);
            assertEquals(dto, roundTrip);
            assertTrue(exampleJson.contains("id"));
            assertTrue(exampleJson.contains("orderId"));
            assertTrue(exampleJson.contains("signature"));
        }
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/CreateOrderRequestDtoContractTest.java ---
package com.voidtracker.oms.order.dto;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assumptions;
import static org.junit.jupiter.api.Assertions.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;
import com.fasterxml.jackson.databind.ObjectMapper;

class CreateOrderRequestDtoContractTest {
    @Test
    void createOrderRequestDtoExampleShouldMatchSchema() throws Exception {
        try (var is = getClass().getClassLoader().getResourceAsStream("schemas/json/example/CreateOrderRequestDto_example.json")) {
            assertNotNull(is, "Example JSON file not found in classpath");
            String exampleJson = new String(is.readAllBytes(), java.nio.charset.StandardCharsets.UTF_8);
            ObjectMapper mapper = new ObjectMapper();
            mapper.registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());
            CreateOrderRequestDto dto = mapper.readValue(exampleJson, CreateOrderRequestDto.class);
            assertNotNull(dto);
            assertEquals("URGENT", dto.priority());
        }
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/CreateOrderRequestDtoRoundTripTest.java ---
package com.voidtracker.oms.order.dto;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assumptions;
import static org.junit.jupiter.api.Assertions.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;
import com.fasterxml.jackson.databind.ObjectMapper;

class CreateOrderRequestDtoRoundTripTest {
    @Test
    void createOrderRequestDtoShouldSerializeAndDeserializeRoundTrip() throws Exception {
        try (var is = getClass().getClassLoader().getResourceAsStream("schemas/json/example/CreateOrderRequestDto_example.json")) {
            assertNotNull(is, "Example JSON file not found in classpath");
            String exampleJson = new String(is.readAllBytes(), java.nio.charset.StandardCharsets.UTF_8);
            ObjectMapper mapper = new ObjectMapper();
            mapper.registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());
            CreateOrderRequestDto dto = mapper.readValue(exampleJson, CreateOrderRequestDto.class);
            String serialized = mapper.writeValueAsString(dto);
            CreateOrderRequestDto roundTrip = mapper.readValue(serialized, CreateOrderRequestDto.class);
            assertEquals(dto, roundTrip);
        }
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/EPodDtoContractTest.java ---
package com.voidtracker.oms.order.dto;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assumptions;
import static org.junit.jupiter.api.Assertions.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;
import com.fasterxml.jackson.databind.ObjectMapper;

class EpodDtoContractTest {
    @Test
    void epodDtoExampleShouldMatchSchema() throws Exception {
        try (var is = getClass().getClassLoader().getResourceAsStream("schemas/json/example/ePoDDto_example.json")) {
            assertNotNull(is, "Example JSON file not found in classpath");
            String exampleJson = new String(is.readAllBytes(), java.nio.charset.StandardCharsets.UTF_8);
            ObjectMapper mapper = new ObjectMapper();
            mapper.registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());
            OrderDto.EpodDto dto = mapper.readValue(exampleJson, OrderDto.EpodDto.class);
            assertNotNull(dto);
            assertEquals("epod-001", dto.id());
        }
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/ePoDDtoRoundTripTest.java ---
package com.voidtracker.oms.order.dto;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assumptions;
import static org.junit.jupiter.api.Assertions.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;
import com.fasterxml.jackson.databind.ObjectMapper;

class EpodDtoRoundTripTest {
    @Test
    void epodDtoShouldSerializeAndDeserializeRoundTrip() throws Exception {
        try (var is = getClass().getClassLoader().getResourceAsStream("schemas/json/example/ePoDDto_example.json")) {
            assertNotNull(is, "Example JSON file not found in classpath");
            String exampleJson = new String(is.readAllBytes(), java.nio.charset.StandardCharsets.UTF_8);
            ObjectMapper mapper = new ObjectMapper();
            mapper.registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());
            OrderDto.EpodDto dto = mapper.readValue(exampleJson, OrderDto.EpodDto.class);
            String serialized = mapper.writeValueAsString(dto);
            OrderDto.EpodDto roundTrip = mapper.readValue(serialized, OrderDto.EpodDto.class);
            assertEquals(dto, roundTrip);
        }
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/ExampleCreateOrderRequestDtoFactory.java ---
package com.voidtracker.oms.order.dto;

public class ExampleCreateOrderRequestDtoFactory {
    public static CreateOrderRequestDto createExampleCreateOrderRequestDto() {
        CreateOrderRequestDto.PartyDto pickup = new CreateOrderRequestDto.PartyDto(
            "customer1", "alias1", "PL", 1, "00-001", "Warsaw", "Main St", "1A", "John Doe", "", "route1", "part1", "type1", "2024-06-10", null, null, "john@example.com", "+48123456789", "note", null
        );
        CreateOrderRequestDto.PartyDto delivery = new CreateOrderRequestDto.PartyDto(
            "customer2", "alias2", "PL", 2, "00-002", "Krakow", "Second St", "2B", "Jane Doe", "", "route2", "part2", "type2", "2024-06-11", null, null, "jane@example.com", "+48987654321", "note2", null
        );
        CreateOrderRequestDto.PackageDimensionsDto dims = new CreateOrderRequestDto.PackageDimensionsDto(1.0, 2.0, 3.0);
        CreateOrderRequestDto.PackageDto pkg = new CreateOrderRequestDto.PackageDto(
            "barcode1", "barcode2", 1, 10.0, 0.5, 100.0, "STANDARD", dims, "driver note", "invoice note", 99.99, "PLN", false
        );
        return new CreateOrderRequestDto(
            "customer1",
            pickup,
            delivery,
            pkg
        );
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/ExampleEPodDtoFactory.java ---
package com.voidtracker.oms.order.dto;

import com.voidtracker.oms.order.dto.OrderDto.EpodDto;
import java.time.OffsetDateTime;
import java.util.Collections;

public class ExampleEPodDtoFactory {
    public static EpodDto createExampleEpodDto() {
        return new EpodDto(
            "epod-1", // id
            "a1b2c3d4-e5f6-7890-1234-567890abcdef", // orderId
            "base64signature", // signature
            Collections.singletonList("base64photo"), // photos
            OffsetDateTime.parse("2024-06-10T08:10:00Z"), // timestamp
            "john_doe" // userId
        );
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/ExampleOrderConfirmationResponseDtoFactory.java ---
package com.voidtracker.oms.order.dto;

public class ExampleOrderConfirmationResponseDtoFactory {
    public static OrderConfirmationResponseDto createExampleOrderConfirmationResponseDto() {
        return new OrderConfirmationResponseDto(
            "a1b2c3d4-e5f6-7890-1234-567890abcdef",
            "CONFIRMED",
            "2024-06-10T08:10:00Z"
        );
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/ExampleOrderDtoFactory.java ---
package com.voidtracker.oms.order.dto;

import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;

public class ExampleOrderDtoFactory {
    public static OrderDto createExampleOrderDto() {
        OrderDto.PartyDto pickup = new OrderDto.PartyDto(
            "customer1", "alias1", "PL", 1, "00-001", "Warsaw", "Main St", "1A", "John Doe", "", "route1", "part1", "type1", "2024-06-10", OffsetDateTime.now(), OffsetDateTime.now().plusHours(1), "john@example.com", "+48123456789", "note", OffsetDateTime.now().plusDays(1)
        );
        OrderDto.PartyDto delivery = new OrderDto.PartyDto(
            "customer2", "alias2", "PL", 2, "00-002", "Krakow", "Second St", "2B", "Jane Doe", "", "route2", "part2", "type2", "2024-06-11", OffsetDateTime.now(), OffsetDateTime.now().plusHours(2), "jane@example.com", "+48987654321", "note2", OffsetDateTime.now().plusDays(2)
        );
        OrderDto.PackageDimensionsDto dims = new OrderDto.PackageDimensionsDto(1.0, 2.0, 3.0);
        OrderDto.PackageDto pkg = new OrderDto.PackageDto(
            "barcode1", "barcode2", 1, 10.0, 0.5, 100.0, "STANDARD", dims, "driver note", "invoice note", 99.99, "PLN", false
        );
        OrderDto.TimestampsDto timestamps = new OrderDto.TimestampsDto(OffsetDateTime.now(), OffsetDateTime.now());
        OrderDto.EpodDto epod = new OrderDto.EpodDto(
            "epod-1", "a1b2c3d4-e5f6-7890-1234-567890abcdef", "base64signature", Collections.singletonList("base64photo"), OffsetDateTime.now(), "john_doe"
        );
        return new OrderDto(
            "a1b2c3d4-e5f6-7890-1234-567890abcdef",
            "PICKUP",
            "URGENT",
            pickup,
            delivery,
            pkg,
            timestamps,
            "john_doe",
            List.of(epod)
        );
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/ExampleOrderEventDtoFactory.java ---
package com.voidtracker.oms.order.dto;

public class ExampleOrderEventDtoFactory {
    public static OrderEventDto createExampleOrderEventDto() {
        OrderEventDto event = new OrderEventDto();
        event.setEventId("evt-1");
        event.setOrderId("a1b2c3d4-e5f6-7890-1234-567890abcdef");
        event.setType("STATUS_CHANGE");
        event.setStatusFrom("PICKUP");
        event.setStatusTo("LOAD");
        event.setTimestamp("2024-06-10T08:10:00Z");
        event.setUserId("john_doe");
        return event;
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/ExampleOrderListItemDtoFactory.java ---
package com.voidtracker.oms.order.dto;

public class ExampleOrderListItemDtoFactory {
    public static OrderListItemDto createExampleOrderListItemDto() {
        OrderListItemDto item = new OrderListItemDto();
        item.setOrderId("a1b2c3d4-e5f6-7890-1234-567890abcdef");
        item.setStatus("PICKUP");
        item.setPriority("URGENT");
        item.setCustomer("DANXILS Sp. z o.o.");
        item.setCityFrom("Warszawa");
        item.setCityTo("Poznań");
        item.setCreated("2024-06-10T07:30:00Z");
        item.setAssignedDriver("john_doe");
        return item;
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/ExampleOrderStatusHistoryDtoFactory.java ---
package com.voidtracker.oms.order.dto;

import java.util.Arrays;

public class ExampleOrderStatusHistoryDtoFactory {
    public static OrderStatusHistoryDto createExampleOrderStatusHistoryDto() {
        OrderStatusHistoryDto hist = new OrderStatusHistoryDto();
        hist.setOrderId("a1b2c3d4-e5f6-7890-1234-567890abcdef");
        OrderStatusHistoryDto.StatusChange s1 = new OrderStatusHistoryDto.StatusChange();
        s1.setStatus("PENDING");
        s1.setTimestamp("2024-06-10T07:30:00Z");
        OrderStatusHistoryDto.StatusChange s2 = new OrderStatusHistoryDto.StatusChange();
        s2.setStatus("NEW");
        s2.setTimestamp("2024-06-10T07:35:00Z");
        OrderStatusHistoryDto.StatusChange s3 = new OrderStatusHistoryDto.StatusChange();
        s3.setStatus("PICKUP");
        s3.setTimestamp("2024-06-10T08:00:00Z");
        hist.setHistory(Arrays.asList(s1, s2, s3));
        return hist;
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/ExampleProductDetailsDtoFactory.java ---
package com.voidtracker.oms.order.dto;

public class ExampleProductDetailsDtoFactory {
    public static ProductDetailsDto createExampleProductDetailsDto() {
        ProductDetailsDto product = new ProductDetailsDto();
        product.setProductId("prod-123");
        product.setName("Tarcza hamulcowa");
        product.setDescription("Tarcza hamulcowa do pojazdu ciężarowego");
        product.setWeight(12.5);
        product.setVolume(0.03);
        product.setPrice(250.00);
        product.setCurrency("PLN");
        return product;
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/OrderConfirmationResponseDtoContractTest.java ---
package com.voidtracker.oms.order.dto;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assumptions;
import static org.junit.jupiter.api.Assertions.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;
import com.fasterxml.jackson.databind.ObjectMapper;

class OrderConfirmationResponseDtoContractTest {
    @Test
    void orderConfirmationResponseDtoExampleShouldMatchSchema() throws Exception {
        try (var is = getClass().getClassLoader().getResourceAsStream("schemas/json/example/OrderConfirmationResponseDto_example.json")) {
            assertNotNull(is, "Example JSON file not found in classpath");
            String exampleJson = new String(is.readAllBytes(), java.nio.charset.StandardCharsets.UTF_8);
            ObjectMapper mapper = new ObjectMapper();
            OrderConfirmationResponseDto dto = mapper.readValue(exampleJson, OrderConfirmationResponseDto.class);
            assertNotNull(dto);
            assertEquals("CONFIRMED", dto.confirmationStatus());
        }
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/OrderConfirmationResponseDtoRoundTripTest.java ---
package com.voidtracker.oms.order.dto;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assumptions;
import static org.junit.jupiter.api.Assertions.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;
import com.fasterxml.jackson.databind.ObjectMapper;

class OrderConfirmationResponseDtoRoundTripTest {
    @Test
    void orderConfirmationResponseDtoShouldSerializeAndDeserializeRoundTrip() throws Exception {
        try (var is = getClass().getClassLoader().getResourceAsStream("schemas/json/example/OrderConfirmationResponseDto_example.json")) {
            assertNotNull(is, "Example JSON file not found in classpath");
            String exampleJson = new String(is.readAllBytes(), java.nio.charset.StandardCharsets.UTF_8);
            ObjectMapper mapper = new ObjectMapper();
            OrderConfirmationResponseDto dto = mapper.readValue(exampleJson, OrderConfirmationResponseDto.class);
            String serialized = mapper.writeValueAsString(dto);
            OrderConfirmationResponseDto roundTrip = mapper.readValue(serialized, OrderConfirmationResponseDto.class);
            assertEquals(dto, roundTrip);
        }
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/OrderDtoContractTest.java ---
package com.voidtracker.oms.order.dto;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assumptions;
import static org.junit.jupiter.api.Assertions.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;
import com.fasterxml.jackson.databind.ObjectMapper;

class OrderDtoContractTest {
    @Test
    void orderDtoExampleShouldMatchSchema() throws Exception {
        try (var is = getClass().getClassLoader().getResourceAsStream("schemas/json/example/OrderDto_example.json")) {
            assertNotNull(is, "Example JSON file not found in classpath");
            String exampleJson = new String(is.readAllBytes(), java.nio.charset.StandardCharsets.UTF_8);
            ObjectMapper mapper = new ObjectMapper();
            mapper.registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());
            OrderDto dto = mapper.readValue(exampleJson, OrderDto.class);
            assertNotNull(dto);
            assertEquals("a1b2c3d4-e5f6-7890-1234-567890abcdef", dto.orderId());
        }
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/OrderDtoExampleValidationTest.java ---
package com.voidtracker.oms.order.dto;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assumptions;
import static org.junit.jupiter.api.Assertions.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;
import com.fasterxml.jackson.databind.ObjectMapper;

class OrderDtoExampleValidationTest {
    @Test
    void orderDtoExampleShouldContainAllRequiredFields() throws Exception {
        try (var is = getClass().getClassLoader().getResourceAsStream("schemas/json/example/OrderDto_example.json")) {
            assertNotNull(is, "Example JSON file not found in classpath");
            String exampleJson = new String(is.readAllBytes(), java.nio.charset.StandardCharsets.UTF_8);
            assertTrue(exampleJson.contains("orderId"));
            assertTrue(exampleJson.contains("pickup"));
            assertTrue(exampleJson.contains("delivery"));
            assertTrue(exampleJson.contains("package"));
            assertTrue(exampleJson.contains("timestamps"));
            assertTrue(exampleJson.contains("priority"));
            assertTrue(exampleJson.contains("status"));
        }
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/OrderDtoMappingTest.java ---
package com.voidtracker.oms.order.dto;

// Test mapowania OrderDto <-> Order wymaga obecności encji Order i mappera OrderMapper.
// Jeśli nie masz tych klas, zakomentuj lub usuń ten test.
// Jeśli masz, upewnij się, że importy i implementacja są poprawne.


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/OrderDtoRoundTripTest.java ---
package com.voidtracker.oms.order.dto;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assumptions;
import static org.junit.jupiter.api.Assertions.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;
import com.fasterxml.jackson.databind.ObjectMapper;

class OrderDtoRoundTripTest {
    @Test
    void orderDtoShouldSerializeAndDeserializeRoundTrip() throws Exception {
        try (var is = getClass().getClassLoader().getResourceAsStream("schemas/json/example/OrderDto_example.json")) {
            assertNotNull(is, "Example JSON file not found in classpath");
            String exampleJson = new String(is.readAllBytes(), java.nio.charset.StandardCharsets.UTF_8);
            ObjectMapper mapper = new ObjectMapper();
            mapper.registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());
            OrderDto dto = mapper.readValue(exampleJson, OrderDto.class);
            String serialized = mapper.writeValueAsString(dto);
            OrderDto roundTrip = mapper.readValue(serialized, OrderDto.class);
            assertEquals(dto, roundTrip);
        }
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/OrderEventDtoContractTest.java ---
package com.voidtracker.oms.order.dto;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.networknt.schema.JsonSchema;
import com.networknt.schema.JsonSchemaFactory;
import com.networknt.schema.SpecVersion;
import com.networknt.schema.ValidationMessage;
import com.voidtracker.oms.order.dto.OrderEventDto;
import org.junit.jupiter.api.Test;

import java.io.InputStream;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertTrue;

public class OrderEventDtoContractTest {
    private final ObjectMapper objectMapper = new ObjectMapper();

    @Test
    void orderEventDtoShouldMatchJsonSchema() throws Exception {
        OrderEventDto event = ExampleOrderEventDtoFactory.createExampleOrderEventDto();
        String json = objectMapper.writeValueAsString(event);
        InputStream schemaStream = getClass().getResourceAsStream("/schemas/json/OrderEvent_v1.json");
        JsonSchemaFactory factory = JsonSchemaFactory.getInstance(SpecVersion.VersionFlag.V7);
        JsonSchema schema = factory.getSchema(schemaStream);
        Set<ValidationMessage> errors = schema.validate(objectMapper.readTree(json));
        assertTrue(errors.isEmpty(), "OrderEventDto nie spełnia kontraktu JSON Schema: " + errors);
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/OrderListItemDtoContractTest.java ---
package com.voidtracker.oms.order.dto;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.networknt.schema.JsonSchema;
import com.networknt.schema.JsonSchemaFactory;
import com.networknt.schema.SpecVersion;
import com.networknt.schema.ValidationMessage;
import com.voidtracker.oms.order.dto.OrderListItemDto;
import org.junit.jupiter.api.Test;

import java.io.InputStream;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertTrue;

public class OrderListItemDtoContractTest {
    private final ObjectMapper objectMapper = new ObjectMapper();

    @Test
    void orderListItemDtoShouldMatchJsonSchema() throws Exception {
        OrderListItemDto item = ExampleOrderListItemDtoFactory.createExampleOrderListItemDto();
        String json = objectMapper.writeValueAsString(item);
        InputStream schemaStream = getClass().getResourceAsStream("/schemas/json/OrderListItem_v1.json");
        JsonSchemaFactory factory = JsonSchemaFactory.getInstance(SpecVersion.VersionFlag.V7);
        JsonSchema schema = factory.getSchema(schemaStream);
        Set<ValidationMessage> errors = schema.validate(objectMapper.readTree(json));
        assertTrue(errors.isEmpty(), "OrderListItemDto nie spełnia kontraktu JSON Schema: " + errors);
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/OrderStatusHistoryDtoContractTest.java ---
package com.voidtracker.oms.order.dto;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.networknt.schema.JsonSchema;
import com.networknt.schema.JsonSchemaFactory;
import com.networknt.schema.SpecVersion;
import com.networknt.schema.ValidationMessage;
import com.voidtracker.oms.order.dto.OrderStatusHistoryDto;
import org.junit.jupiter.api.Test;

import java.io.InputStream;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertTrue;

public class OrderStatusHistoryDtoContractTest {
    private final ObjectMapper objectMapper = new ObjectMapper();

    @Test
    void orderStatusHistoryDtoShouldMatchJsonSchema() throws Exception {
        OrderStatusHistoryDto hist = ExampleOrderStatusHistoryDtoFactory.createExampleOrderStatusHistoryDto();
        String json = objectMapper.writeValueAsString(hist);
        InputStream schemaStream = getClass().getResourceAsStream("/schemas/json/OrderStatusHistory_v1.json");
        JsonSchemaFactory factory = JsonSchemaFactory.getInstance(SpecVersion.VersionFlag.V7);
        JsonSchema schema = factory.getSchema(schemaStream);
        Set<ValidationMessage> errors = schema.validate(objectMapper.readTree(json));
        assertTrue(errors.isEmpty(), "OrderStatusHistoryDto nie spełnia kontraktu JSON Schema: " + errors);
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/ProductDetailsDtoContractTest.java ---
package com.voidtracker.oms.order.dto;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.networknt.schema.JsonSchema;
import com.networknt.schema.JsonSchemaFactory;
import com.networknt.schema.SpecVersion;
import com.networknt.schema.ValidationMessage;
import com.voidtracker.oms.order.dto.ProductDetailsDto;
import org.junit.jupiter.api.Test;

import java.io.InputStream;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertTrue;

public class ProductDetailsDtoContractTest {
    private final ObjectMapper objectMapper = new ObjectMapper();

    @Test
    void productDetailsDtoShouldMatchJsonSchema() throws Exception {
        ProductDetailsDto product = ExampleProductDetailsDtoFactory.createExampleProductDetailsDto();
        String json = objectMapper.writeValueAsString(product);
        InputStream schemaStream = getClass().getResourceAsStream("/schemas/json/ProductDetails_v1.json");
        JsonSchemaFactory factory = JsonSchemaFactory.getInstance(SpecVersion.VersionFlag.V7);
        JsonSchema schema = factory.getSchema(schemaStream);
        Set<ValidationMessage> errors = schema.validate(objectMapper.readTree(json));
        assertTrue(errors.isEmpty(), "ProductDetailsDto nie spełnia kontraktu JSON Schema: " + errors);
    }
}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/dto/ProductDetailsDtoMappingTest.java ---
package com.voidtracker.oms.order.dto;

// Test mapowania ProductDetailsDto <-> Product wymaga obecności encji Product i mappera ProductMapper.
// Jeśli nie masz tych klas, zakomentuj lub usuń ten test.
// Jeśli masz, upewnij się, że importy i implementacja są poprawne.


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/OrderServiceApplicationTests.java ---
package com.voidtracker.oms.order;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest(classes = com.voidtracker.oms.order.OrderServiceApplication.class)
class OrderServiceApplicationTests {

    @Test
    void contextLoads() {
    }

}


--- Plik: ./order-service/src/test/java/com/voidtracker/oms/order/service/OrderServiceTest.java ---
package com.voidtracker.oms.order.service;

import com.voidtracker.oms.order.dto.OrderDto;
import org.junit.jupiter.api.Test;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.UUID;
import static org.assertj.core.api.Assertions.assertThat;

class OrderServiceTest {
    @Test
    void createAndGetOrder() {
        // OrderService is abstract; in real tests, use a mock or a concrete implementation
        // Here, we just test OrderDto instantiation
        OrderDto.PartyDto pickup = new OrderDto.PartyDto(
            "customer1", "alias1", "PL", 1, "00-001", "Warsaw", "Main St", "1A", "John Doe", "", "route1", "part1", "type1", "2024-06-10", OffsetDateTime.now(), OffsetDateTime.now().plusHours(1), "john@example.com", "+48123456789", "note", OffsetDateTime.now().plusDays(1)
        );
        OrderDto.PartyDto delivery = new OrderDto.PartyDto(
            "customer2", "alias2", "PL", 2, "00-002", "Krakow", "Second St", "2B", "Jane Doe", "", "route2", "part2", "type2", "2024-06-11", OffsetDateTime.now(), OffsetDateTime.now().plusHours(2), "jane@example.com", "+48987654321", "note2", OffsetDateTime.now().plusDays(2)
        );
        OrderDto.PackageDimensionsDto dims = new OrderDto.PackageDimensionsDto(1.0, 2.0, 3.0);
        OrderDto.PackageDto pkg = new OrderDto.PackageDto(
            "barcode1", "barcode2", 1, 10.0, 0.5, 100.0, "STANDARD", dims, "driver note", "invoice note", 99.99, "PLN", false
        );
        OrderDto.TimestampsDto timestamps = new OrderDto.TimestampsDto(OffsetDateTime.now(), OffsetDateTime.now());
        OrderDto.EpodDto epod = new OrderDto.EpodDto(
            "epod-1", UUID.randomUUID().toString(), "base64signature", Collections.singletonList("base64photo"), OffsetDateTime.now(), "john_doe"
        );
        OrderDto order = new OrderDto(
            UUID.randomUUID().toString(),
            "PICKUP",
            "URGENT",
            pickup,
            delivery,
            pkg,
            timestamps,
            "john_doe",
            List.of(epod)
        );
        assertThat(order.orderId()).isNotNull();
        assertThat(order.pickup().customer()).isEqualTo("customer1");
    }
}


--- Plik: ./pom.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- Dziedziczymy po spring-boot-starter-parent, który zarządza wersjami większości bibliotek. -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.0</version>
        <relativePath/>
    </parent>

    <groupId>com.voidtracker.oms</groupId>
    <artifactId>voidtracker-parent</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>VoidTracker :: Parent</name>
    <description>Nadrzędny projekt POM dla systemu VoidTracker OMS</description>

    <modules>
        <module>voidtracker-commons</module>
        <module>order-service</module>
        <module>user-service</module>
        <module>audit-service</module>
    </modules>

    <properties>
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <springdoc-openapi.version>2.5.0</springdoc-openapi.version>
    </properties>

    <!--
      Zarządzamy centralnie tylko wersjami tych zależności,
      których nie ma w nadrzędnym BOMie Spring Boota.
    -->
    <dependencyManagement>
        <dependencies>
            <!-- Nasza wspólna biblioteka -->
            <dependency>
                <groupId>com.voidtracker.oms</groupId>
                <artifactId>voidtracker-commons</artifactId>
                <version>${project.version}</version>
            </dependency>

            <!-- Dokumentacja API -->
            <dependency>
                <groupId>org.springdoc</groupId>
                <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
                <version>${springdoc-openapi.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <version>3.4.4</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
                <version>3.4.4</version>
            </dependency>
            <dependency>
                <groupId>javax.validation</groupId>
                <artifactId>validation-api</artifactId>
                <version>2.0.1.Final</version>
            </dependency>

        </dependencies>

    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.10.1</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>1.18.30</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>


--- Plik: ./README.md ---
# VoidTracker OMS - Unified Environment Setup

## Overview
This project is a modular, contract-driven Order Management System (OMS) for logistics, built with Java Spring Boot (backend microservices) and Vue.js (frontend). It follows the Qodo Manifesto: testable, documented, versioned, and ready for change.

## Services
- **order-service** (port 8081): Order management, route, tracking
- **user-service** (port 8082): User profiles, roles, authentication
- **audit-service** (port 8083): Audit logging, event history

## Quick Start (Backend)
1. **Build all services:**
   ```sh
   ./mvnw clean package
   ```
2. **Run all services with Docker Compose:**
   ```sh
   docker-compose up --build
   ```
   - order-service: http://localhost:8081
   - user-service: http://localhost:8082
   - audit-service: http://localhost:8083

3. **API Documentation (Swagger UI):**
   - Order: [http://localhost:8081/swagger-ui.html](http://localhost:8081/swagger-ui.html)
   - User: [http://localhost:8082/swagger-ui.html](http://localhost:8082/swagger-ui.html)
   - Audit: [http://localhost:8083/swagger-ui.html](http://localhost:8083/swagger-ui.html)

## Quick Start (Frontend)
1. **Navigate to the frontend directory (if present):**
   ```sh
   cd frontend
   npm install
   npm run serve
   ```
2. **Configure API base URLs in the frontend to match backend ports.**

## CORS
All backend services are CORS-enabled for local frontend development (Vue, React, etc.).

## Extending/Testing
- All APIs are contract-driven (OpenAPI, JSON Schema, DTOs).
- Add new modules/services as needed (see Qodo Manifesto and ARCHITECTURE_OVERVIEW.md).
- Test with real frontend or API tools (Swagger UI, Postman).

## Roadmap
- Add persistent storage (PostgreSQL, MongoDB)
- Integrate authentication (OAuth2/JWT)
- Expand frontend (Vue) for full OMS workflows
- Add CI/CD and automated contract tests


--- Plik: ./src/main/java/com/voidtracker/oms/voidtrackerparent/VoidtrackerApplication.java ---
package com.voidtracker.oms.voidtrackerparent;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class VoidtrackerApplication {

    public static void main(String[] args) {
        SpringApplication.run(VoidtrackerApplication.class, args);
    }

}


--- Plik: ./src/main/resources/application.properties ---
spring.application.name=voidtracker


--- Plik: ./src/test/java/com/voidtracker/oms/voidtrackerparent/VoidtrackerApplicationTests.java ---
package com.voidtracker.oms.voidtrackerparent;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class VoidtrackerApplicationTests {

    @Test
    void contextLoads() {
    }

}


--- Plik: ./user-service/pom.xml ---
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.voidtracker.oms</groupId>
        <artifactId>voidtracker-parent</artifactId>
        <version>1.0.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>user-service</artifactId>
    <name>User Service</name>
    <description>User management microservice</description>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.everit.json</groupId>
            <artifactId>org.everit.json.schema</artifactId>
            <version>1.5.1</version>
            <exclusions>
                <exclusion>
                    <groupId>org.json</groupId>
                    <artifactId>json</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>com.voidtracker.oms</groupId>
            <artifactId>voidtracker-commons</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.25.3</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>5.2.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path</artifactId>
            <version>2.9.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-test-autoconfigure</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>


--- Plik: ./user-service/src/main/java/com/voidtracker/oms/user/config/CorsConfig.java ---
package com.voidtracker.oms.user.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class CorsConfig {
    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**")
                        .allowedOriginPatterns("http://localhost:8080", "http://localhost:3000", "*")
                        .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                        .allowedHeaders("*")
                        .allowCredentials(true);
            }
        };
    }
}


--- Plik: ./user-service/src/main/java/com/voidtracker/oms/user/config/JsonSchemaValidatorConfig.java ---


--- Plik: ./user-service/src/main/java/com/voidtracker/oms/user/controller/UserController.java ---
package com.voidtracker.oms.user.controller;

import com.voidtracker.oms.user.dto.UserProfileDto;
import com.voidtracker.oms.user.service.UserService;
import com.voidtracker.oms.commons.validation.JsonSchemaValidator;
import org.everit.json.schema.ValidationException;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import java.nio.charset.StandardCharsets;

@RestController
@RequestMapping("/api/users")
@Tag(name = "User Management", description = "User profile and role management API")
public class UserController {
    private final UserService userService;
    private final JsonSchemaValidator jsonSchemaValidator;
    private final String userProfileSchema;

    public UserController(UserService userService, JsonSchemaValidator jsonSchemaValidator) throws Exception {
        this.userService = userService;
        this.jsonSchemaValidator = jsonSchemaValidator;
        // Load schema from classpath
        var resource = new ClassPathResource("schemas/json/UserProfile_v1.json");
        this.userProfileSchema = new String(resource.getInputStream().readAllBytes(), StandardCharsets.UTF_8);
    }

    @GetMapping
    @Operation(summary = "List all users", responses = {
        @ApiResponse(responseCode = "200", description = "List of users", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserProfileDto.class)))
    })
    public List<UserProfileDto> listUsers() {
        return userService.listUsers();
    }

    @GetMapping("/{id}")
    @Operation(summary = "Get user details", responses = {
        @ApiResponse(responseCode = "200", description = "User details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserProfileDto.class)))
    })
    public ResponseEntity<UserProfileDto> getUser(@PathVariable String id) {
        UserProfileDto user = userService.getUser(id);
        if (user == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }
        return ResponseEntity.ok(user);
    }

    @PostMapping
    @Operation(summary = "Create new user", responses = {
        @ApiResponse(responseCode = "201", description = "Created user", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserProfileDto.class))),
        @ApiResponse(responseCode = "400", description = "Validation error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = com.voidtracker.oms.commons.dto.ApiErrorDto.class)))
    })
    public ResponseEntity<?> createUser(@RequestBody String userDtoJson) throws Exception {
        try {
            jsonSchemaValidator.validate(userDtoJson, userProfileSchema);
            UserProfileDto userDto = new com.fasterxml.jackson.databind.ObjectMapper().readValue(userDtoJson, UserProfileDto.class);
            return ResponseEntity.status(HttpStatus.CREATED).body(userService.createUser(userDto));
        } catch (ValidationException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(
                Map.of("errorCode", "VALIDATION_ERROR", "message", e.getMessage())
            );
        }
    }

    @PutMapping("/{id}")
    @Operation(summary = "Update user", responses = {
        @ApiResponse(responseCode = "200", description = "Updated user", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserProfileDto.class))),
        @ApiResponse(responseCode = "400", description = "Validation error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = com.voidtracker.oms.commons.dto.ApiErrorDto.class)))
    })
    public ResponseEntity<?> updateUser(@PathVariable String id, @RequestBody String userDtoJson) throws Exception {
        try {
            jsonSchemaValidator.validate(userDtoJson, userProfileSchema);
            UserProfileDto userDto = new com.fasterxml.jackson.databind.ObjectMapper().readValue(userDtoJson, UserProfileDto.class);
            return ResponseEntity.ok(userService.updateUser(id, userDto));
        } catch (ValidationException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(
                Map.of("errorCode", "VALIDATION_ERROR", "message", e.getMessage())
            );
        }
    }

    @DeleteMapping("/{id}")
    @Operation(summary = "Delete user")
    public ResponseEntity<Void> deleteUser(@PathVariable String id) {
        userService.deleteUser(id);
        return ResponseEntity.noContent().build();
    }
}


--- Plik: ./user-service/src/main/java/com/voidtracker/oms/user/dto/UserDto.java ---
package com.voidtracker.oms.user.dto;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.time.Instant;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class UserDto {
    private String id;
    private String username;
    private String role;
    private String passwordHash;
    private Instant lastPasswordChange;
    private boolean active;
}


--- Plik: ./user-service/src/main/java/com/voidtracker/oms/user/dto/UserProfileDto.java ---
package com.voidtracker.oms.user.dto;

public record UserProfileDto(
    String id,
    String username,
    String role,
    boolean active
) {

}


--- Plik: ./user-service/src/main/java/com/voidtracker/oms/user/README.md ---
# User Service - Developer Notes

## Overview
This service manages user profiles, authentication, and authorization for the VoidTracker OMS platform, including:
- User profile CRUD operations
- Role and permission management
- Integration with authentication providers (OAuth2, JWT)
- Contract-driven API (OpenAPI, JSON Schema, DTOs)

## Key Packages
- `controller` - REST API endpoints
- `dto` - Data Transfer Objects (records, contract-driven)
- `service` - Business logic
- `repository` - Persistence layer
- `security` - Authentication and authorization logic

## Development Guidelines
- All DTOs must have a matching JSON Schema and example payload
- All endpoints must be documented in OpenAPI and versioned
- Use contract and round-trip tests for all DTOs
- Validate all incoming/outgoing payloads against schemas
- Use constructor-based dependency injection
- No business logic in controllers (pure services)

## Quick Start
- Run contract tests: `mvn test`
- Validate schemas/examples: see scripts in project root
- API docs: `/swagger-ui.html` (after running service)

## Roadmap
- Integrate with external identity providers
- Add support for password policies, MFA, and audit logging
- Extend user roles and permissions for fine-grained access control


--- Plik: ./user-service/src/main/java/com/voidtracker/oms/user/repository/InMemoryUserRepository.java ---
package com.voidtracker.oms.user.repository;

import com.voidtracker.oms.user.dto.UserProfileDto;
import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class InMemoryUserRepository implements UserRepository {
    private final Map<String, UserProfileDto> users = new HashMap<>();

    @Override
    public List<UserProfileDto> findAll() {
        return new ArrayList<>(users.values());
    }

    @Override
    public Optional<UserProfileDto> findById(String id) {
        return Optional.ofNullable(users.get(id));
    }

    @Override
    public UserProfileDto save(UserProfileDto user) {
        users.put(user.id(), user);
        return user;
    }

    @Override
    public void deleteById(String id) {
        users.remove(id);
    }
}


--- Plik: ./user-service/src/main/java/com/voidtracker/oms/user/repository/UserRepository.java ---
package com.voidtracker.oms.user.repository;

import com.voidtracker.oms.user.dto.UserProfileDto;
import java.util.*;

public interface UserRepository {
    List<UserProfileDto> findAll();
    Optional<UserProfileDto> findById(String id);
    UserProfileDto save(UserProfileDto user);
    void deleteById(String id);
}


--- Plik: ./user-service/src/main/java/com/voidtracker/oms/user/service/UserService.java ---
package com.voidtracker.oms.user.service;

import com.voidtracker.oms.user.dto.UserProfileDto;
import com.voidtracker.oms.user.repository.UserRepository;
import org.springframework.stereotype.Service;
import java.util.*;

@Service
public class UserService {
    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public List<UserProfileDto> listUsers() {
        return userRepository.findAll();
    }

    public UserProfileDto getUser(String id) {
        return userRepository.findById(id).orElse(null);
    }

    public UserProfileDto createUser(UserProfileDto user) {
        return userRepository.save(user);
    }

    public UserProfileDto updateUser(String id, UserProfileDto user) {
        return userRepository.save(user);
    }

    public void deleteUser(String id) {
        userRepository.deleteById(id);
    }
}


--- Plik: ./user-service/src/main/java/com/voidtracker/oms/user/UserServiceApplication.java ---
package com.voidtracker.oms.user;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class UserServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(UserServiceApplication.class, args);
    }
}


--- Plik: ./user-service/src/main/java/com/voidtracker/oms/user/validation/JsonSchemaValidator.java ---
package com.voidtracker.oms.user.validation;

import org.everit.json.schema.loader.SchemaLoader;
import org.everit.json.schema.Schema;
import org.json.JSONObject;
import org.json.JSONTokener;
import org.springframework.stereotype.Component;

@Component
public class JsonSchemaValidator {
    public void validate(String json, String schemaContent) {
        JSONObject rawSchema = new JSONObject(new JSONTokener(schemaContent));
        Schema schema = SchemaLoader.load(rawSchema);
        schema.validate(new JSONObject(json)); // throws ValidationException if invalid
    }
}


--- Plik: ./user-service/src/main/resources/application.properties ---
server.port=8082
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
management.endpoints.web.exposure.include=health,info


--- Plik: ./user-service/src/test/java/com/voidtracker/oms/user/controller/UserControllerContractIT.java ---
package com.voidtracker.oms.user.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.voidtracker.oms.user.dto.UserProfileDto;
import com.voidtracker.oms.user.dto.ExampleUserProfileDtoFactory;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
public class UserControllerContractIT {
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ObjectMapper objectMapper;

    @Test
    void shouldAcceptValidUserProfileDto() throws Exception {
        UserProfileDto user = ExampleUserProfileDtoFactory.createExampleUserProfileDto();
        mockMvc.perform(post("/api/users/")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(user)))
                .andExpect(status().isCreated());
    }
}


--- Plik: ./user-service/src/test/java/com/voidtracker/oms/user/controller/UserControllerSchemaValidationTest.java ---
package com.voidtracker.oms.user.controller;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doThrow;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;

import org.springframework.boot.test.mock.mockito.MockBean;
import com.voidtracker.oms.user.service.UserService;
import com.voidtracker.oms.commons.validation.JsonSchemaValidator;

@WebMvcTest(UserController.class)
class UserControllerSchemaValidationTest {
    @MockBean
    private UserService userService;
    @MockBean
    private JsonSchemaValidator jsonSchemaValidator;
    @Autowired
    private MockMvc mockMvc;

    @Test
    void shouldRejectInvalidUserPayload() throws Exception {
        String invalidJson = "{\"id\":\"user-001\"}"; // missing required fields
        doThrow(new org.everit.json.schema.ValidationException(null, "Invalid payload".getClass(), "", "")).when(jsonSchemaValidator).validate(any(), any());
        mockMvc.perform(post("/api/users")
                .contentType(MediaType.APPLICATION_JSON)
                .content(invalidJson))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.errorCode").value("VALIDATION_ERROR"));
    }

    @Test
    void shouldAcceptValidUserPayload() throws Exception {
        String validJson = "{\"id\":\"user-001\",\"username\":\"john_doe\",\"role\":\"admin\",\"active\":true}";
        mockMvc.perform(post("/api/users")
                .contentType(MediaType.APPLICATION_JSON)
                .content(validJson))
                .andExpect(status().isCreated());
    }
}


--- Plik: ./user-service/src/test/java/com/voidtracker/oms/user/controller/UserControllerTest.java ---
package com.voidtracker.oms.user.controller;

import com.voidtracker.oms.user.dto.UserProfileDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import org.springframework.boot.test.mock.mockito.MockBean;
import com.voidtracker.oms.user.service.UserService;
import com.voidtracker.oms.commons.validation.JsonSchemaValidator;

@SpringBootTest
@AutoConfigureMockMvc
class UserControllerTest {
    @MockBean
    private UserService userService;
    @MockBean
    private JsonSchemaValidator jsonSchemaValidator;
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ObjectMapper objectMapper;

    @Test
    void createAndGetUser() throws Exception {
        UserProfileDto user = new UserProfileDto("id2", "user2", "USER", true);
        String json = objectMapper.writeValueAsString(user);
        when(userService.createUser(any())).thenReturn(user);
        when(userService.getUser("id2")).thenReturn(user);
        mockMvc.perform(post("/api/users")
                .contentType(MediaType.APPLICATION_JSON)
                .content(json))
                .andExpect(status().isCreated());
        mockMvc.perform(get("/api/users/id2"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.username").value("user2"));
    }

    @Test
    void updateUser() throws Exception {
        UserProfileDto user = new UserProfileDto("id3", "user3", "USER", true);
        UserProfileDto updated = new UserProfileDto("id3", "user3x", "ADMIN", false);
        String json = objectMapper.writeValueAsString(user);
        String updatedJson = objectMapper.writeValueAsString(updated);
        when(userService.createUser(any())).thenReturn(user);
        when(userService.updateUser(eq("id3"), any())).thenReturn(updated);
        when(userService.getUser("id3")).thenReturn(updated);
        mockMvc.perform(post("/api/users")
                .contentType(MediaType.APPLICATION_JSON)
                .content(json))
                .andExpect(status().isCreated());
        mockMvc.perform(put("/api/users/id3")
                .contentType(MediaType.APPLICATION_JSON)
                .content(updatedJson))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.username").value("user3x"));
    }

    @Test
    void deleteUser() throws Exception {
        UserProfileDto user = new UserProfileDto("id4", "user4", "USER", true);
        String json = objectMapper.writeValueAsString(user);
        when(userService.createUser(any())).thenReturn(user);
        when(userService.getUser("id4")).thenReturn(user).thenReturn(null);
        doNothing().when(userService).deleteUser("id4");
        mockMvc.perform(post("/api/users")
                .contentType(MediaType.APPLICATION_JSON)
                .content(json))
                .andExpect(status().isCreated());
        mockMvc.perform(delete("/api/users/id4"))
                .andExpect(status().isNoContent());
        // After deletion, explicitly set the mock to return null
        when(userService.getUser("id4")).thenReturn(null);
        mockMvc.perform(get("/api/users/id4"))
                .andExpect(status().isNotFound());
    }
}


--- Plik: ./user-service/src/test/java/com/voidtracker/oms/user/dto/ExampleUserProfileDtoFactory.java ---
package com.voidtracker.oms.user.dto;

public class ExampleUserProfileDtoFactory {
    public static UserProfileDto createExampleUserProfileDto() {
        return new UserProfileDto(
            "a1b2c3d4-e5f6-7890-1234-567890abcdef", // userId
            "john_doe", // username
            "John Doe", // fullName
            true // active (example boolean, adjust as per your record definition)
        );
    }
}


--- Plik: ./user-service/src/test/java/com/voidtracker/oms/user/dto/UserProfileDtoContractTest.java ---
package com.voidtracker.oms.user.dto;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.io.ClassPathResource;

class UserProfileDtoContractTest {
    @Test
    void userProfileDtoExampleShouldMatchSchema() throws Exception {
        ClassPathResource resource = new ClassPathResource("schemas/json/example/UserProfileDto_example.json");
        try (InputStream is = resource.getInputStream()) {
            String exampleJson = new String(is.readAllBytes(), StandardCharsets.UTF_8);
            assertNotNull(exampleJson);
            ObjectMapper mapper = new ObjectMapper();
            UserProfileDto dto = mapper.readValue(exampleJson, UserProfileDto.class);
            assertNotNull(dto);
            assertEquals("john_doe", dto.username());
            assertTrue(exampleJson.contains("username"));
            assertTrue(exampleJson.contains("role"));
        }
    }

    @Test
    void userProfileDtoShouldSerializeAndDeserializeRoundTrip() throws Exception {
        ClassPathResource resource = new ClassPathResource("schemas/json/example/UserProfileDto_example.json");
        try (InputStream is = resource.getInputStream()) {
            String exampleJson = new String(is.readAllBytes(), StandardCharsets.UTF_8);
            ObjectMapper mapper = new ObjectMapper();
            UserProfileDto dto = mapper.readValue(exampleJson, UserProfileDto.class);
            String serialized = mapper.writeValueAsString(dto);
            UserProfileDto roundTrip = mapper.readValue(serialized, UserProfileDto.class);
            assertEquals(dto, roundTrip);
        }
    }
}


--- Plik: ./user-service/src/test/java/com/voidtracker/oms/user/dto/UserProfileDtoMappingTest.java ---
package com.voidtracker.oms.user.dto;

import com.voidtracker.oms.user.dto.UserProfileDto;
// import com.voidtracker.oms.user.entity.User;
// import com.voidtracker.oms.user.mapper.UserMapper;
import org.junit.jupiter.api.Test;
import static org.assertj.core.api.Assertions.assertThat;

public class UserProfileDtoMappingTest {
    @Test
    void shouldMapUserToUserProfileDtoAndBack() {
        // Test disabled: User and UserMapper do not exist in this project.
        // User user = new User();
        // ...wypełnij przykładowe dane encji User...
        // UserProfileDto dto = UserMapper.INSTANCE.toDto(user);
        // User mapped = UserMapper.INSTANCE.toEntity(dto);
        // assertThat(mapped).usingRecursiveComparison().isEqualTo(user);
    }
}


--- Plik: ./user-service/src/test/java/com/voidtracker/oms/user/dto/UserProfileDtoRoundTripTest.java ---
package com.voidtracker.oms.user.dto;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assumptions;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;
import com.fasterxml.jackson.databind.ObjectMapper;

public class UserProfileDtoRoundTripTest {
    @Test
    public void userProfileDtoShouldSerializeAndDeserializeRoundTrip() throws Exception {
        try (var is = getClass().getClassLoader().getResourceAsStream("schemas/json/example/UserProfileDto_example.json")) {
            org.junit.jupiter.api.Assertions.assertNotNull(is, "Example JSON file not found in classpath");
            String exampleJson = new String(is.readAllBytes(), java.nio.charset.StandardCharsets.UTF_8);
            ObjectMapper mapper = new ObjectMapper();
            UserProfileDto dto = mapper.readValue(exampleJson, UserProfileDto.class);
            String serialized = mapper.writeValueAsString(dto);
            UserProfileDto roundTrip = mapper.readValue(serialized, UserProfileDto.class);
            assertEquals(dto, roundTrip);
        }
    }
}


--- Plik: ./user-service/src/test/java/com/voidtracker/oms/user/service/UserServiceTest.java ---
package com.voidtracker.oms.user.service;

import com.voidtracker.oms.user.dto.UserProfileDto;
import com.voidtracker.oms.user.repository.UserRepository;
import org.junit.jupiter.api.Test;
import java.util.Optional;
import java.util.HashMap;
import java.util.Map;
import static org.assertj.core.api.Assertions.assertThat;

class UserServiceTest {
    static class InMemoryUserRepository implements UserRepository {
        private final Map<String, UserProfileDto> users = new HashMap<>();
        @Override
        public java.util.List<UserProfileDto> findAll() { return new java.util.ArrayList<>(users.values()); }
        @Override
        public Optional<UserProfileDto> findById(String id) { return Optional.ofNullable(users.get(id)); }
        @Override
        public UserProfileDto save(UserProfileDto user) { users.put(user.id(), user); return user; }
        @Override
        public void deleteById(String id) { users.remove(id); }
    }

    @Test
    void createAndGetUser() {
        UserRepository repo = new InMemoryUserRepository();
        UserService service = new UserService(repo);
        UserProfileDto user = new UserProfileDto("id1", "user1", "User One", true);
        service.createUser(user);
        UserProfileDto found = service.getUser("id1");
        assertThat(found).isNotNull();
        assertThat(found.id()).isEqualTo("id1");
        assertThat(found.username()).isEqualTo("user1");
    }
}


--- Plik: ./user-service/src/test/java/com/voidtracker/oms/user/UserServiceApplicationTests.java ---
package com.voidtracker.oms.user;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

import org.springframework.boot.test.mock.mockito.MockBean;
import com.voidtracker.oms.user.service.UserService;
import com.voidtracker.oms.commons.validation.JsonSchemaValidator;

@SpringBootTest
class UserServiceApplicationTests {
    @MockBean
    private UserService userService;
    @MockBean
    private JsonSchemaValidator jsonSchemaValidator;

    @Test
    void contextLoads() {
    }

}


--- Plik: ./voidtracker-commons/pom.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>


    <parent>
        <groupId>com.voidtracker.oms</groupId>
        <artifactId>voidtracker-parent</artifactId>
        <version>1.0.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>


    <artifactId>voidtracker-commons</artifactId>
    <name>VoidTracker :: Commons</name>
    <description>Współdzielone klasy (DTO, Enums, Utils) dla mikroserwisów OMS</description>

    <dependencies>
        <dependency>
            <groupId>org.everit.json</groupId>
            <artifactId>org.everit.json.schema</artifactId>
            <version>1.5.1</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.validation</groupId>
            <artifactId>jakarta.validation-api</artifactId>
            <version>3.0.2</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.10.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.networknt</groupId>
            <artifactId>json-schema-validator</artifactId>
            <version>1.0.76</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.15.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.10.1</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>1.18.30</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>


--- Plik: ./voidtracker-commons/src/main/java/com/voidtracker/oms/commons/dto/ApiErrorDto.java ---
package com.voidtracker.oms.commons.dto;

public record ApiErrorDto(
    String errorCode,
    String message,
    String details
) {}


--- Plik: ./voidtracker-commons/src/main/java/com/voidtracker/oms/commons/enums/OrderStatus.java ---
// Plik: voidtracker-commons/src/main/java/com/voidtracker/oms/commons/enums/OrderStatus.java
package com.voidtracker.oms.commons.enums;

/**
 * Definiuje statusy cyklu życia zlecenia, zgodnie z dokumentacją projektową.
 * Te statusy są kluczowe dla logiki biznesowej w całym systemie.
 */
public enum OrderStatus {
    /**
     * Zlecenie utworzone, oczekuje na weryfikację (np. poprawności adresu).
     */
    PENDING,

    /**
     * Zlecenie zweryfikowane i gotowe do przydziału kierowcy.
     */
    NEW,

    /**
     * Zlecenie w trakcie odbioru od nadawcy.
     */
    PICKUP,

    /**
     * Paczka w sortowni lub w trakcie transferu między oddziałami.
     */
    TERM,

    /**
     * Paczka załadowana na samochód dostawczy.
     */
    LOAD,

    /**
     * Zlecenie dostarczone, uzyskano elektroniczne potwierdzenie odbioru (ePoD).
     */
    POD
}

--- Plik: ./voidtracker-commons/src/main/java/com/voidtracker/oms/commons/exception/RestExceptionHandler.java ---
package com.voidtracker.oms.commons.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@ControllerAdvice
public class RestExceptionHandler {
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<String> handleValidation(MethodArgumentNotValidException ex) {
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Validation error: " + ex.getMessage());
    }
    @ExceptionHandler(Exception.class)
    public ResponseEntity<String> handleOther(Exception ex) {
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error: " + ex.getMessage());
    }
}


--- Plik: ./voidtracker-commons/src/main/java/com/voidtracker/oms/commons/validation/JsonSchemaValidator.java ---
package com.voidtracker.oms.commons.validation;

import org.everit.json.schema.loader.SchemaLoader;
import org.everit.json.schema.Schema;
import org.json.JSONObject;
import org.json.JSONTokener;
import org.springframework.stereotype.Component;

@Component
public class JsonSchemaValidator {
    public void validate(String json, String schemaContent) {
        JSONObject rawSchema = new JSONObject(new JSONTokener(schemaContent));
        Schema schema = SchemaLoader.load(rawSchema);
        schema.validate(new JSONObject(json)); // throws ValidationException if invalid
    }
}


--- Plik: ./voidtracker-commons/src/main/resources/application.properties ---
spring.application.name=voidtracker-commons


--- Plik: ./voidtracker-commons/src/test/java/com/voidtracker/oms/commons/dto/ApiErrorDtoContractTest.java ---
package com.voidtracker.oms.commons.dto;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.nio.charset.StandardCharsets;

class ApiErrorDtoContractTest {
    @Test
    void apiErrorDtoExampleShouldMatchSchema() throws Exception {
        String exampleJson = new String(
            getClass().getResourceAsStream("/schemas/json/example/ApiErrorDto_example.json").readAllBytes(),
            StandardCharsets.UTF_8
        );
        assertNotNull(exampleJson);
        assertTrue(exampleJson.contains("errorCode"));
        assertTrue(exampleJson.contains("message"));
    }
}


--- Plik: ./voidtracker-commons/src/test/java/com/voidtracker/oms/commons/dto/ApiErrorDtoRoundTripTest.java ---
package com.voidtracker.oms.commons.dto;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.nio.charset.StandardCharsets;
import com.fasterxml.jackson.databind.ObjectMapper;

class ApiErrorDtoRoundTripTest {
    @Test
    void apiErrorDtoShouldSerializeAndDeserializeRoundTrip() throws Exception {
        String exampleJson = new String(
            getClass().getResourceAsStream("/schemas/json/example/ApiErrorDto_example.json").readAllBytes(),
            StandardCharsets.UTF_8
        );
        ObjectMapper mapper = new ObjectMapper();
        ApiErrorDto dto = mapper.readValue(exampleJson, ApiErrorDto.class);
        String serialized = mapper.writeValueAsString(dto);
        ApiErrorDto roundTrip = mapper.readValue(serialized, ApiErrorDto.class);
        assertEquals(dto, roundTrip);
    }
}


--- Plik: ./voidtracker-commons/src/test/java/com/voidtracker/oms/commons/dto/ExampleApiErrorDtoFactory.java ---
package com.voidtracker.oms.commons.dto;

public class ExampleApiErrorDtoFactory {
    public static ApiErrorDto createExampleApiErrorDto() {
        return new ApiErrorDto(
            "ORDER_NOT_FOUND",
            "Nie znaleziono zlecenia o podanym ID.",
            "orderId: a1b2c3d4-e5f6-7890-1234-567890abcdef"
        );
    }
}